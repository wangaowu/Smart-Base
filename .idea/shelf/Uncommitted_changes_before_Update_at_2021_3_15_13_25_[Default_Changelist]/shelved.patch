Index: app/src/main/java/com/bytemiracle/project/login/LoginFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.project.login;\r\n\r\nimport android.Manifest;\r\nimport android.content.ClipData;\r\nimport android.content.ClipboardManager;\r\nimport android.graphics.Color;\r\nimport android.os.Build;\r\nimport android.os.Environment;\r\nimport android.text.TextUtils;\r\nimport android.util.DisplayMetrics;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.WindowManager;\r\nimport android.view.inputmethod.EditorInfo;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.bytemiracle.base.framework.fragment.BaseFragment;\r\nimport com.bytemiracle.base.framework.fragment.FragmentTag;\r\nimport com.bytemiracle.base.framework.listener.CommonAsyncListener;\r\nimport com.bytemiracle.base.framework.utils.ConstantsUtil;\r\nimport com.bytemiracle.base.framework.utils.DeviceUtils;\r\nimport com.bytemiracle.base.framework.utils.EasySharedPreference;\r\nimport com.bytemiracle.base.framework.utils.FileUtils;\r\nimport com.bytemiracle.base.framework.utils.NetUtil;\r\nimport com.bytemiracle.base.framework.utils.UniqueIdUtil;\r\nimport com.bytemiracle.base.framework.utils.XToastUtils;\r\nimport com.bytemiracle.project.R;\r\nimport com.bytemiracle.project.common.FileLocalUtils;\r\nimport com.bytemiracle.project.common.RabbitMqUnit;\r\nimport com.bytemiracle.project.common.Utils;\r\nimport com.bytemiracle.project.common.db.GreenDaoManager;\r\nimport com.bytemiracle.base.framework.http.XHttpServiceImpl;\r\nimport com.xuexiang.xhttp2.XHttp;\r\nimport com.xuexiang.xhttp2.callback.SimpleCallBack;\r\nimport com.xuexiang.xhttp2.exception.ApiException;\r\nimport com.xuexiang.xhttp2.model.HttpHeaders;\r\nimport com.xuexiang.xui.utils.WidgetUtils;\r\nimport com.xuexiang.xui.widget.button.roundbutton.RoundButton;\r\nimport com.xuexiang.xui.widget.dialog.LoadingDialog;\r\nimport com.xuexiang.xui.widget.dialog.materialdialog.GravityEnum;\r\nimport com.xuexiang.xui.widget.dialog.materialdialog.MaterialDialog;\r\nimport com.xuexiang.xui.widget.edittext.verify.VerifyCodeEditText;\r\nimport com.xuexiang.xupdate.proxy.IUpdateHttpService;\r\nimport com.xuexiang.xutil.XUtil;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.io.File;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport butterknife.BindView;\r\nimport pub.devrel.easypermissions.AfterPermissionGranted;\r\nimport pub.devrel.easypermissions.EasyPermissions;\r\n\r\nimport static androidx.core.content.ContextCompat.getSystemService;\r\n\r\n@FragmentTag(name = \"登录\")\r\npublic class LoginFragment extends BaseFragment implements EasyPermissions.PermissionCallbacks {\r\n\r\n    public static final String TAG = \"LoginFragment\";\r\n    private boolean inited = false;\r\n    private static final int RC_PERM = 124;\r\n    private static final String[] PERMS = {\r\n            Manifest.permission.READ_PHONE_STATE,\r\n            Manifest.permission.RECORD_AUDIO,\r\n            Manifest.permission.READ_PHONE_STATE,\r\n            Manifest.permission.READ_EXTERNAL_STORAGE,\r\n            Manifest.permission.WRITE_EXTERNAL_STORAGE,\r\n            Manifest.permission.INTERNET,\r\n            Manifest.permission.ACCESS_FINE_LOCATION,\r\n            Manifest.permission.ACCESS_COARSE_LOCATION,\r\n            Manifest.permission.CALL_PHONE\r\n    };\r\n\r\n    @BindView(R.id.forgetButton)\r\n    Button forgetButton;\r\n\r\n    @BindView(R.id.loginPassword)\r\n    EditText loginPassword;\r\n\r\n    @BindView(R.id.loginButton)\r\n    Button loginButton;\r\n\r\n    @BindView(R.id.login)\r\n    View loginLay;\r\n\r\n    @BindView(R.id.register)\r\n    View registerLay;\r\n\r\n    @BindView(R.id.registerBtn)\r\n    Button registerBtn;\r\n\r\n\r\n    @BindView(R.id.registerCode)\r\n    VerifyCodeEditText registerCode;\r\n\r\n    LoadingDialog mLoadingDialog;\r\n\r\n    @Override\r\n    protected int getLayoutId() {\r\n        return R.layout.fragment_login;\r\n    }\r\n\r\n    @Override\r\n    protected void initViews() {\r\n        //默认展示登录页面\r\n        loginLay.setVisibility(View.VISIBLE);\r\n        registerLay.setVisibility(View.GONE);\r\n\r\n\r\n        //消费消息\r\n        RabbitMqUnit.CreateInstance().active();\r\n        // 绑定事件\r\n        bindEvt();\r\n        //绑定忘记密码事件\r\n        forgerPassword();\r\n\r\n        mLoadingDialog = WidgetUtils.getLoadingDialog(getContext())\r\n                .setIconScale(0.4F)\r\n                .setLoadingSpeed(8);\r\n        registerBtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                registerMachine();\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void registerViewVisibility() {\r\n        /**\r\n         * 判断是否已注册，并且有效\r\n         *    注册：license是否存在，存在，通过 ，不存在，重新保存license文件\r\n         *    未注册或者无效：需要注册\r\n         *\r\n         *\r\n         */\r\n        //查询设备是否是激活状态\r\n        checkActiveMachine(new CommonAsyncListener<Integer>() {\r\n            @RequiresApi(api = Build.VERSION_CODES.O)\r\n            @Override\r\n            public void doSomething(Integer data) {\r\n                //Data：正常 = 0，停用 = 1, 注册失败 = 2,删除 = 3\r\n                //Msg ：3：\"已删除，请重新注册\";1：\"已停用，请联系管理员进行激活\":2：\"注册失败，请重新注册\"\r\n                if (data == 0) {\r\n                    //已注册，并处于激活状态\r\n                    if (Register.checkHiveLicenseFile()) {\r\n                        //有注册文件\r\n                        if (!Register.verify(getString(R.string.app_name))) {\r\n                            //注册信息不对，例如非法拷贝的注册文件，则需要重新注册\r\n                            loginLay.setVisibility(View.GONE);\r\n                            registerLay.setVisibility(View.VISIBLE);\r\n                        }\r\n                    } else {\r\n                        //没有注册license文件，重新生成\r\n                        Register.genLicense(getString(R.string.app_name));\r\n                    }\r\n                } else {\r\n                    //处于未注册或者未激活状态\r\n                    loginLay.setVisibility(View.GONE);\r\n                    registerLay.setVisibility(View.VISIBLE);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void onResume() {\r\n        super.onResume();\r\n        // 获取权限\r\n        reqPerms();\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n\r\n        // Forward results to EasyPermissions\r\n        EasyPermissions.onRequestPermissionsResult(requestCode, permissions, grantResults, this);\r\n    }\r\n\r\n    @AfterPermissionGranted(RC_PERM)\r\n    public void reqPerms() {\r\n        if (EasyPermissions.hasPermissions(getContext(), PERMS)) {\r\n            if (inited == false) {\r\n                inited = true;\r\n                // Have permissions, do the thing!\r\n                String oldMachineId = DeviceUtils.getIMEI(getContext());\r\n                String newMachineId = UniqueIdUtil.getDeviceId(getContext());\r\n                addMachineCode(oldMachineId, newMachineId);\r\n                FileUtils fileUtils = FileUtils.getInstance(getContext());\r\n                //初始化数据库\r\n                GreenDaoManager.getInstance().init(Environment.getExternalStorageDirectory() + File.separator + FileLocalUtils.getZnyyDbPath());\r\n                //是否展示注册页面\r\n                registerViewVisibility();\r\n                fileUtils.copyAssetsToSD(FileLocalUtils.output, FileLocalUtils.sysName + File.separator + FileLocalUtils.output);\r\n                fileUtils.setFileOperateCallback(new FileUtils.FileOperateCallback() {\r\n                    @Override\r\n                    public void onSuccess() {\r\n                        Utils.setConfig();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onFailed(String error) {\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // Ask for both permissions\r\n            EasyPermissions.requestPermissions(\r\n                    this,\r\n                    \"需要获取您的使用权限\",\r\n                    RC_PERM,\r\n                    PERMS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param oldMachineId\r\n     */\r\n    private void addMachineCode(String oldMachineId, String newMachineId) {\r\n        if (NetUtil.getNetWorkStart(getContext()) != 1) {\r\n            if (oldMachineId.equals(newMachineId)) {\r\n                Log.i(TAG, \"新版本app不需要再增加id\");\r\n            } else {\r\n                //新增新旧id到server端\r\n                Map<String, Object> addMachineParams = new HashMap() {\r\n                    {\r\n                        put(\"oldId\", oldMachineId);\r\n                        put(\"newId\", newMachineId);\r\n                    }\r\n                };\r\n                XHttp.post(\"smart-server/app/add\").baseUrl(ConstantsUtil.SERVER_ADDRESS)\r\n                        .params(addMachineParams)\r\n                        .execute(new SimpleCallBack<Object>() {\r\n                            @Override\r\n                            public void onSuccess(Object response) {\r\n                                Log.i(TAG, \"机器码增加成功\");\r\n                            }\r\n\r\n                            @Override\r\n                            public void onError(ApiException e) {\r\n                                Log.e(TAG, \"机器码增加失败\");\r\n                            }\r\n                        });\r\n            }\r\n        } else {\r\n            Log.i(TAG, \"没网情况不添加机器码\");\r\n        }\r\n    }\r\n\r\n    private void bindEvt() {\r\n        loginButton.setOnClickListener(v -> doLogin());\r\n        loginPassword.setOnEditorActionListener((v, actionId, event) -> {\r\n            if (actionId == EditorInfo.IME_ACTION_GO) {\r\n                doLogin();\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        loginPassword.setOnFocusChangeListener((v, hasFocus) -> loginPassword.setBackgroundResource(\r\n                hasFocus ? R.drawable.bg_edit_text_bottom_border_focus\r\n                        : R.drawable.bg_edit_text_bottom_border_gray));\r\n    }\r\n\r\n    private void doLogin() {\r\n        String password = loginPassword.getText().toString();\r\n        if (TextUtils.isEmpty(password)) {\r\n            XToastUtils.error(\"密码不能为空\");\r\n            return;\r\n        }\r\n        //先判断有无网络\r\n        //有网情况下直接登录，有网登录后判断pref中是否是第一次登录，登录成功后将密码，状态码信息保存到pref中\r\n        // 没有网络情况下则需要判断pref中是否第一次登录，\r\n        // 如果是第一次登录则提示系统要联网，如果不是第一次登录则比较密码和状态\r\n        if (NetUtil.getNetWorkStart(getContext()) != 1) {\r\n            //有网情况\r\n            mLoadingDialog.updateMessage(\"请稍等……\");\r\n            mLoadingDialog.show();\r\n            Map<String, Object> loginParams = new HashMap() {\r\n                {\r\n                    put(\"macAddress\", UniqueIdUtil.getDeviceId(getContext()));\r\n                    put(\"password\", password);\r\n                }\r\n            };\r\n            XHttp.post(\"smart-server/app/login\").baseUrl(ConstantsUtil.SERVER_ADDRESS)\r\n                    .params(loginParams)\r\n                    .keepJson(true)\r\n                    .execute(new SimpleCallBack<String>() {\r\n                        @Override\r\n                        public void onSuccess(String response) {\r\n                            mLoadingDialog.dismiss();\r\n                            JSONObject jsonObject = JSONObject.parseObject(response);\r\n                            if (jsonObject.getInteger(\"code\") == 0) {\r\n                                //登录成功,就将password和status信息保存到pref中\r\n                                EasySharedPreference.get().putString(ConstantsUtil.APP_ASSISTANT_PASSWORD, password);\r\n                                EasySharedPreference.get().putInt(ConstantsUtil.APP_ASSISTANT_STATUS, 0);\r\n                                //将设备关联的用户信息保存至系统中\r\n                                if (StringUtils.isNotEmpty(jsonObject.getString(\"data\"))) {\r\n                                    EasySharedPreference.get().put(ConstantsUtil.THIS_MACHINE_BIND_ACCOUNT_INFO, jsonObject.getString(\"data\"));\r\n                                }\r\n                                //登录成功，跳转到主页面\r\n                                switchContentFragment(MainPageFragment.class);\r\n                                //登录成功，清空密码\r\n                                loginPassword.getText().clear();\r\n                                //获取用户信息\r\n                                new Register().asyncGetUserInfo();\r\n                            } else if (jsonObject.getInteger(\"code\") == 1) {\r\n                                //账号被锁定，需激活跳转的登录界面\r\n                                EasySharedPreference.get().putInt(ConstantsUtil.APP_ASSISTANT_STATUS, 1);\r\n                                XToastUtils.error(\"账号被锁定，需激活\");\r\n                            } else if (jsonObject.getInteger(\"code\") == 3) {\r\n                                XToastUtils.error(\"未知设备需注册\");\r\n                            } else {\r\n                                //登录失败,跳转到登录界面\r\n                                XToastUtils.error(\"密码错误\");\r\n                            }\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(ApiException e) {\r\n                            mLoadingDialog.dismiss();\r\n                            XToastUtils.error(\"密码错误\");\r\n                        }\r\n                    });\r\n        } else {\r\n            //没网情况\r\n            String localSavePass = EasySharedPreference.get().getString(ConstantsUtil.APP_ASSISTANT_PASSWORD);\r\n            if(\"\".equals(localSavePass)){\r\n                XToastUtils.error(\"首次使用登录功能，请连接网络！\");\r\n                return;\r\n            }\r\n            if (password.equals(localSavePass)) {\r\n                if (EasySharedPreference.get().getInt(ConstantsUtil.APP_ASSISTANT_STATUS, 0) == 0) {\r\n                    //登录成功，跳转到主页面\r\n                    switchContentFragment(MainPageFragment.class);\r\n                } else {\r\n                    //账户被锁定，没权限，跳转到登录界面\r\n                    XToastUtils.error(\"账户被锁定，需激活\");\r\n                }\r\n            } else {\r\n                //账户名密码错误，跳转到登录界面\r\n                XToastUtils.error(\"密码错误\");\r\n            }\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onPermissionsGranted(int requestCode, @NonNull List<String> perms) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onPermissionsDenied(int requestCode, @NonNull List<String> perms) {\r\n\r\n    }\r\n\r\n\r\n    private void forgerPassword() {\r\n        forgetButton.setOnClickListener(v -> {\r\n            final MaterialDialog forgetPasswordDialog = new MaterialDialog.Builder(getContext())\r\n                    .customView(R.layout.dialog_forget_password, true)\r\n                    .title(\"忘记密码\").titleGravity(GravityEnum.CENTER).titleColor(Color.BLACK)\r\n                    .build();\r\n\r\n            TextView machineCodeText = forgetPasswordDialog.findViewById(R.id.machineCode);\r\n            String machineCode = UniqueIdUtil.getDeviceId(getContext());\r\n            machineCodeText.setText(machineCode);\r\n            RoundButton cancel = forgetPasswordDialog.findViewById(R.id.cancel);\r\n            cancel.setOnClickListener(v1 -> {\r\n                forgetPasswordDialog.dismiss();\r\n                //将machineCode复制到剪切板\r\n                //获取剪贴板管理器：\r\n                ClipboardManager cm = getSystemService(XUtil.getContext(), ClipboardManager.class);\r\n                // 创建普通字符型ClipData\r\n                ClipData mClipData = ClipData.newPlainText(\"Label\", machineCode);\r\n                // 将ClipData内容放到系统剪贴板里。\r\n                cm.setPrimaryClip(mClipData);\r\n                XToastUtils.success(\"已将设备码复制到系统剪切板中\");\r\n            });\r\n            forgetPasswordDialog.show();\r\n            DisplayMetrics dm = new DisplayMetrics();\r\n            getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);\r\n            WindowManager.LayoutParams lp = forgetPasswordDialog.getWindow().getAttributes();\r\n            lp.width = (int) (dm.widthPixels * 0.37);\r\n            forgetPasswordDialog.getWindow().setAttributes(lp);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 注册设备\r\n     * Key\t项目注册码，设备管理这边给  2bSRSBMmVczRz1Be\r\n     * MacAddress\t本地设备Mac地址\r\n     * Brand\t设备型号\r\n     * ProjectName\t项目名称，设备管理这边给出   测试项目\r\n     */\r\n    public void registerMachine() {\r\n\r\n        String regCode = registerCode.getInputValue();\r\n        if (TextUtils.isEmpty(regCode)) {\r\n            XToastUtils.error(\"注册码不能为空,请联系管理员获取注册码！\");\r\n            return;\r\n        }\r\n        //获取权限\r\n        if (NetUtil.getNetWorkStart(getContext()) != 1) {\r\n            Map params = new HashMap<String, String>();\r\n            params.put(\"Key\", regCode);\r\n            params.put(\"MacAddress\", UniqueIdUtil.getDeviceId(getContext()));\r\n            params.put(\"Brand\", Build.MODEL);\r\n            params.put(\"ProjectName\", getString(R.string.app_name)); //ServerCenter/Base_Project/Authorize\r\n\r\n            HttpHeaders commonHeaders = new HttpHeaders();\r\n            commonHeaders.put(\"Authorization\", \"Admin@ShaanxiByteMiracle\");\r\n            XHttp.getInstance().addCommonHeaders(commonHeaders).setBaseUrl(ConstantsUtil.DEVICEMANAGER_IP);\r\n\r\n            XHttpServiceImpl http = new XHttpServiceImpl();\r\n            http.asyncPost(\"/ServerCenter/Base_Project/Authorize\", params, new IUpdateHttpService.Callback() {\r\n                @RequiresApi(api = Build.VERSION_CODES.O)\r\n                @Override\r\n                public void onSuccess(String result) {\r\n                    Log.e(TAG, result);\r\n                    JSONObject object = JSON.parseObject(result);\r\n                    String msg = object.getString(\"Msg\");\r\n                    boolean bol = object.getBoolean(\"Success\");\r\n                    if (bol) {\r\n                        // 验证成功生成 lic\r\n                        Register.genLicense(getString(R.string.app_name));\r\n                        XToastUtils.toast(\"注册成功,请登录\");\r\n                        loginLay.setVisibility(View.VISIBLE);\r\n                        registerLay.setVisibility(View.GONE);\r\n                        //ActivityUtils.startActivity(MainActivity.class);\r\n                    } else {\r\n                        XToastUtils.warning(msg);\r\n                    }\r\n                }\r\n\r\n                @Override\r\n                public void onError(Throwable throwable) {\r\n\r\n                }\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 核查设备的激活状态\r\n     * MacAddress\t设备Mac地址\r\n     * ProjectName\t项目名称\r\n     */\r\n    public void checkActiveMachine(CommonAsyncListener<Integer> listener) {\r\n        //获取权限\r\n        if (NetUtil.getNetWorkStart(getContext()) != 1) {\r\n            Map params = new HashMap<String, String>();\r\n            params.put(\"MacAddress\", UniqueIdUtil.getDeviceId(getContext()));\r\n            params.put(\"ProjectName\", getString(R.string.app_name)); //ServerCenter/Base_Project/Authorize\r\n\r\n            HttpHeaders commonHeaders = new HttpHeaders();\r\n            commonHeaders.put(\"Authorization\", \"Admin@ShaanxiByteMiracle\");\r\n            XHttp.getInstance().addCommonHeaders(commonHeaders).setBaseUrl(ConstantsUtil.DEVICEMANAGER_IP);\r\n\r\n            XHttpServiceImpl http = new XHttpServiceImpl();\r\n            http.asyncPost(\"/ServerCenter/Base_Machine/VerifyMacAddress\", params, new IUpdateHttpService.Callback() {\r\n                @RequiresApi(api = Build.VERSION_CODES.O)\r\n                @Override\r\n                public void onSuccess(String result) {\r\n                    Log.e(TAG, result);\r\n                    JSONObject object = JSON.parseObject(result);\r\n                    //Data：正常 = 0，停用 = 1, 注册失败 = 2,删除 = 3\r\n                    //Msg ：3：\"已删除，请重新注册\";1：\"已停用，请联系管理员进行激活\":2：\"注册失败，请重新注册\"\r\n                    String dataResult = object.getString(\"Data\");\r\n                    JSONObject re = JSON.parseObject(dataResult);\r\n\r\n                    int data = re.getIntValue(\"Data\");\r\n                    String msg = re.getString(\"Msg\");\r\n                    boolean bol = re.getBoolean(\"Success\");\r\n                    if (data != 0) {\r\n                        XToastUtils.warning(msg);\r\n                    }\r\n                    listener.doSomething(data);\r\n                }\r\n\r\n                @Override\r\n                public void onError(Throwable throwable) {\r\n\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/login/LoginFragment.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/login/LoginFragment.java	(date 1615785902765)
@@ -23,6 +23,8 @@
 import com.alibaba.fastjson.JSONObject;
 import com.bytemiracle.base.framework.fragment.BaseFragment;
 import com.bytemiracle.base.framework.fragment.FragmentTag;
+import com.bytemiracle.base.framework.http.OkGoHttp;
+import com.bytemiracle.base.framework.http.OnReceiveResult;
 import com.bytemiracle.base.framework.listener.CommonAsyncListener;
 import com.bytemiracle.base.framework.utils.ConstantsUtil;
 import com.bytemiracle.base.framework.utils.DeviceUtils;
@@ -36,22 +38,15 @@
 import com.bytemiracle.project.common.RabbitMqUnit;
 import com.bytemiracle.project.common.Utils;
 import com.bytemiracle.project.common.db.GreenDaoManager;
-import com.bytemiracle.base.framework.http.XHttpServiceImpl;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.callback.SimpleCallBack;
-import com.xuexiang.xhttp2.exception.ApiException;
-import com.xuexiang.xhttp2.model.HttpHeaders;
+import com.bytemiracle.project.login.bean.LoginResponse;
 import com.xuexiang.xui.utils.WidgetUtils;
 import com.xuexiang.xui.widget.button.roundbutton.RoundButton;
 import com.xuexiang.xui.widget.dialog.LoadingDialog;
 import com.xuexiang.xui.widget.dialog.materialdialog.GravityEnum;
 import com.xuexiang.xui.widget.dialog.materialdialog.MaterialDialog;
 import com.xuexiang.xui.widget.edittext.verify.VerifyCodeEditText;
-import com.xuexiang.xupdate.proxy.IUpdateHttpService;
 import com.xuexiang.xutil.XUtil;
 
-import org.apache.commons.lang3.StringUtils;
-
 import java.io.File;
 import java.util.HashMap;
 import java.util.List;
@@ -172,8 +167,6 @@
                 }
             }
         });
-
-
     }
 
 
@@ -232,33 +225,28 @@
      * @param oldMachineId
      */
     private void addMachineCode(String oldMachineId, String newMachineId) {
-        if (NetUtil.getNetWorkStart(getContext()) != 1) {
-            if (oldMachineId.equals(newMachineId)) {
-                Log.i(TAG, "新版本app不需要再增加id");
-            } else {
-                //新增新旧id到server端
-                Map<String, Object> addMachineParams = new HashMap() {
-                    {
-                        put("oldId", oldMachineId);
-                        put("newId", newMachineId);
-                    }
-                };
-                XHttp.post("smart-server/app/add").baseUrl(ConstantsUtil.SERVER_ADDRESS)
-                        .params(addMachineParams)
-                        .execute(new SimpleCallBack<Object>() {
-                            @Override
-                            public void onSuccess(Object response) {
-                                Log.i(TAG, "机器码增加成功");
-                            }
+        if (oldMachineId.equals(newMachineId)) {
+            Log.i(TAG, "新版本app不需要再增加id");
+        } else {
+            //新增新旧id到server端
+            Map<String, Object> addMachineParams = new HashMap() {
+                {
+                    put("oldId", oldMachineId);
+                    put("newId", newMachineId);
+                }
+            };
+            OkGoHttp.newPostRequest().asyncRequestApiUseForm("smart-server/app/add",
+                    addMachineParams, new OnReceiveResult<Object>() {
+                        @Override
+                        public void onSuccess(Object resultBean) {
+                            Log.i(TAG, "机器码增加成功");
+                        }
 
-                            @Override
-                            public void onError(ApiException e) {
-                                Log.e(TAG, "机器码增加失败");
-                            }
-                        });
-            }
-        } else {
-            Log.i(TAG, "没网情况不添加机器码");
+                        @Override
+                        public void onFailed(String reason) {
+                            Log.e(TAG, "不能添加机器码:" + reason);
+                        }
+                    });
         }
     }
 
@@ -286,76 +274,70 @@
         //有网情况下直接登录，有网登录后判断pref中是否是第一次登录，登录成功后将密码，状态码信息保存到pref中
         // 没有网络情况下则需要判断pref中是否第一次登录，
         // 如果是第一次登录则提示系统要联网，如果不是第一次登录则比较密码和状态
-        if (NetUtil.getNetWorkStart(getContext()) != 1) {
-            //有网情况
-            mLoadingDialog.updateMessage("请稍等……");
-            mLoadingDialog.show();
-            Map<String, Object> loginParams = new HashMap() {
-                {
-                    put("macAddress", UniqueIdUtil.getDeviceId(getContext()));
-                    put("password", password);
-                }
-            };
-            XHttp.post("smart-server/app/login").baseUrl(ConstantsUtil.SERVER_ADDRESS)
-                    .params(loginParams)
-                    .keepJson(true)
-                    .execute(new SimpleCallBack<String>() {
-                        @Override
-                        public void onSuccess(String response) {
-                            mLoadingDialog.dismiss();
-                            JSONObject jsonObject = JSONObject.parseObject(response);
-                            if (jsonObject.getInteger("code") == 0) {
+        //有网情况
+        mLoadingDialog.updateMessage("请稍等……");
+        mLoadingDialog.show();
+        Map<String, Object> loginParams = new HashMap();
+        loginParams.put("macAddress", UniqueIdUtil.getDeviceId(getContext()));
+        loginParams.put("password", password);
+        OkGoHttp.newPostRequest().asyncRequestApiUseForm("smart-server/app/login",
+                loginParams, new OnReceiveResult<LoginResponse>() {
+                    @Override
+                    public void onSuccess(LoginResponse resultBean) {
+                        mLoadingDialog.dismiss();
+                        switch (resultBean.getCode()) {
+                            case 0:
                                 //登录成功,就将password和status信息保存到pref中
                                 EasySharedPreference.get().putString(ConstantsUtil.APP_ASSISTANT_PASSWORD, password);
                                 EasySharedPreference.get().putInt(ConstantsUtil.APP_ASSISTANT_STATUS, 0);
                                 //将设备关联的用户信息保存至系统中
-                                if (StringUtils.isNotEmpty(jsonObject.getString("data"))) {
-                                    EasySharedPreference.get().put(ConstantsUtil.THIS_MACHINE_BIND_ACCOUNT_INFO, jsonObject.getString("data"));
-                                }
+                                EasySharedPreference.get().putObject(ConstantsUtil.THIS_MACHINE_BIND_ACCOUNT_INFO, resultBean.getData());
                                 //登录成功，跳转到主页面
                                 switchContentFragment(MainPageFragment.class);
                                 //登录成功，清空密码
                                 loginPassword.getText().clear();
                                 //获取用户信息
                                 new Register().asyncGetUserInfo();
-                            } else if (jsonObject.getInteger("code") == 1) {
+                                break;
+                            case 1:
                                 //账号被锁定，需激活跳转的登录界面
                                 EasySharedPreference.get().putInt(ConstantsUtil.APP_ASSISTANT_STATUS, 1);
                                 XToastUtils.error("账号被锁定，需激活");
-                            } else if (jsonObject.getInteger("code") == 3) {
+                                break;
+                            case 3:
                                 XToastUtils.error("未知设备需注册");
-                            } else {
+                                break;
+                            default:
                                 //登录失败,跳转到登录界面
                                 XToastUtils.error("密码错误");
-                            }
-                        }
+                                break;
+                        }
+                    }
 
-                        @Override
-                        public void onError(ApiException e) {
-                            mLoadingDialog.dismiss();
-                            XToastUtils.error("密码错误");
-                        }
-                    });
-        } else {
-            //没网情况
-            String localSavePass = EasySharedPreference.get().getString(ConstantsUtil.APP_ASSISTANT_PASSWORD);
-            if("".equals(localSavePass)){
-                XToastUtils.error("首次使用登录功能，请连接网络！");
-                return;
-            }
-            if (password.equals(localSavePass)) {
-                if (EasySharedPreference.get().getInt(ConstantsUtil.APP_ASSISTANT_STATUS, 0) == 0) {
-                    //登录成功，跳转到主页面
-                    switchContentFragment(MainPageFragment.class);
-                } else {
-                    //账户被锁定，没权限，跳转到登录界面
-                    XToastUtils.error("账户被锁定，需激活");
-                }
-            } else {
-                //账户名密码错误，跳转到登录界面
-                XToastUtils.error("密码错误");
-            }
-        }
+                    @Override
+                    public void onFailed(String reason) {
+                        mLoadingDialog.dismiss();
+                        XToastUtils.error(reason);
+                        //没网情况
+                        String localSavePass = EasySharedPreference.get().getString(ConstantsUtil.APP_ASSISTANT_PASSWORD);
+                        if ("".equals(localSavePass)) {
+                            XToastUtils.error("首次使用登录功能，请连接网络！");
+                            return;
+                        }
+                        if (password.equals(localSavePass)) {
+                            if (EasySharedPreference.get().getInt(ConstantsUtil.APP_ASSISTANT_STATUS, 0) == 0) {
+                                //登录成功，跳转到主页面
+                                switchContentFragment(MainPageFragment.class);
+                            } else {
+                                //账户被锁定，没权限，跳转到登录界面
+                                XToastUtils.error("账户被锁定，需激活");
+                            }
+                        } else {
+                            //账户名密码错误，跳转到登录界面
+                            XToastUtils.error("密码错误");
+                        }
+                    }
+                });
     }
 
     @Override
@@ -415,45 +397,46 @@
             return;
         }
         //获取权限
-        if (NetUtil.getNetWorkStart(getContext()) != 1) {
-            Map params = new HashMap<String, String>();
-            params.put("Key", regCode);
-            params.put("MacAddress", UniqueIdUtil.getDeviceId(getContext()));
-            params.put("Brand", Build.MODEL);
-            params.put("ProjectName", getString(R.string.app_name)); //ServerCenter/Base_Project/Authorize
+        Map params = new HashMap<String, String>();
+        params.put("Key", regCode);
+        params.put("MacAddress", UniqueIdUtil.getDeviceId(getContext()));
+        params.put("Brand", Build.MODEL);
+        params.put("ProjectName", getString(R.string.app_name)); //ServerCenter/Base_Project/Authorize
 
-            HttpHeaders commonHeaders = new HttpHeaders();
-            commonHeaders.put("Authorization", "Admin@ShaanxiByteMiracle");
-            XHttp.getInstance().addCommonHeaders(commonHeaders).setBaseUrl(ConstantsUtil.DEVICEMANAGER_IP);
+        Map headers = new HashMap<String, Object>();
+        headers.put("Authorization", "Admin@ShaanxiByteMiracle");
+
+        OkGoHttp.newPostRequest().asyncRequestMachine(
+                "/ServerCenter/Base_Project/Authorize",
+                headers, params, new OnReceiveResult() {
+                    @Override
+                    public void onSuccess(Object resultBean) {
 
-            XHttpServiceImpl http = new XHttpServiceImpl();
-            http.asyncPost("/ServerCenter/Base_Project/Authorize", params, new IUpdateHttpService.Callback() {
-                @RequiresApi(api = Build.VERSION_CODES.O)
-                @Override
-                public void onSuccess(String result) {
-                    Log.e(TAG, result);
-                    JSONObject object = JSON.parseObject(result);
-                    String msg = object.getString("Msg");
-                    boolean bol = object.getBoolean("Success");
-                    if (bol) {
-                        // 验证成功生成 lic
-                        Register.genLicense(getString(R.string.app_name));
-                        XToastUtils.toast("注册成功,请登录");
-                        loginLay.setVisibility(View.VISIBLE);
-                        registerLay.setVisibility(View.GONE);
-                        //ActivityUtils.startActivity(MainActivity.class);
-                    } else {
-                        XToastUtils.warning(msg);
-                    }
-                }
+                    }
+
+                    @Override
+                    public void onJson(String json) {
+                        Log.e(TAG, json);
+                        JSONObject object = JSON.parseObject(json);
+                        String msg = object.getString("Msg");
+                        boolean bol = object.getBoolean("Success");
+                        if (bol) {
+                            // 验证成功生成 lic
+                            Register.genLicense(getString(R.string.app_name));
+                            XToastUtils.toast("注册成功,请登录");
+                            loginLay.setVisibility(View.VISIBLE);
+                            registerLay.setVisibility(View.GONE);
+                            //ActivityUtils.startActivity(MainActivity.class);
+                        } else {
+                            XToastUtils.warning(msg);
+                        }
+                    }
 
-                @Override
-                public void onError(Throwable throwable) {
-
-                }
-            });
-        }
-
+                    @Override
+                    public void onFailed(String reason) {
+                        XToastUtils.info(reason);
+                    }
+                });
     }
 
 
@@ -469,36 +452,39 @@
             params.put("MacAddress", UniqueIdUtil.getDeviceId(getContext()));
             params.put("ProjectName", getString(R.string.app_name)); //ServerCenter/Base_Project/Authorize
 
-            HttpHeaders commonHeaders = new HttpHeaders();
-            commonHeaders.put("Authorization", "Admin@ShaanxiByteMiracle");
-            XHttp.getInstance().addCommonHeaders(commonHeaders).setBaseUrl(ConstantsUtil.DEVICEMANAGER_IP);
+            HashMap<String, Object> headers = new HashMap<>();
+            headers.put("Authorization", "Admin@ShaanxiByteMiracle");
 
-            XHttpServiceImpl http = new XHttpServiceImpl();
-            http.asyncPost("/ServerCenter/Base_Machine/VerifyMacAddress", params, new IUpdateHttpService.Callback() {
-                @RequiresApi(api = Build.VERSION_CODES.O)
-                @Override
-                public void onSuccess(String result) {
-                    Log.e(TAG, result);
-                    JSONObject object = JSON.parseObject(result);
-                    //Data：正常 = 0，停用 = 1, 注册失败 = 2,删除 = 3
-                    //Msg ：3："已删除，请重新注册";1："已停用，请联系管理员进行激活":2："注册失败，请重新注册"
-                    String dataResult = object.getString("Data");
-                    JSONObject re = JSON.parseObject(dataResult);
+            OkGoHttp.newPostRequest().asyncRequestMachine("/ServerCenter/Base_Machine/VerifyMacAddress",
+                    headers, params, new OnReceiveResult() {
+                        @Override
+                        public void onJson(String json) {
+                            Log.e(TAG, json);
+                            JSONObject object = JSON.parseObject(json);
+                            //Data：正常 = 0，停用 = 1, 注册失败 = 2,删除 = 3
+                            //Msg ：3："已删除，请重新注册";1："已停用，请联系管理员进行激活":2："注册失败，请重新注册"
+                            String dataResult = object.getString("Data");
+                            JSONObject re = JSON.parseObject(dataResult);
 
-                    int data = re.getIntValue("Data");
-                    String msg = re.getString("Msg");
-                    boolean bol = re.getBoolean("Success");
-                    if (data != 0) {
-                        XToastUtils.warning(msg);
-                    }
-                    listener.doSomething(data);
-                }
+                            int data = re.getIntValue("Data");
+                            String msg = re.getString("Msg");
+                            boolean bol = re.getBoolean("Success");
+                            if (data != 0) {
+                                XToastUtils.warning(msg);
+                            }
+                            listener.doSomething(data);
+                        }
 
-                @Override
-                public void onError(Throwable throwable) {
+                        @Override
+                        public void onSuccess(Object resultBean) {
+
+                        }
+
+                        @Override
+                        public void onFailed(String reason) {
 
-                }
-            });
+                        }
+                    });
         }
     }
 
Index: app/src/main/java/com/bytemiracle/project/settings/subfragment/FeedbackFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.project.settings.subfragment;\r\n\r\nimport android.app.Activity;\r\nimport android.content.Intent;\r\nimport android.text.TextUtils;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.GridView;\r\nimport android.widget.ImageView;\r\nimport android.widget.LinearLayout;\r\n\r\nimport com.bytemiracle.base.framework.fragment.AnnotationPresenter;\r\nimport com.bytemiracle.base.framework.fragment.FragmentTag;\r\nimport com.bytemiracle.base.framework.fragment.subfragment.BaseSubFragment;\r\nimport com.bytemiracle.base.framework.fragment.subfragment.config.SubTitleConfig;\r\nimport com.bytemiracle.base.framework.listener.CommonAsyncListener;\r\nimport com.bytemiracle.base.framework.preview.PreviewUtils;\r\nimport com.bytemiracle.base.framework.utils.ConstantsUtil;\r\nimport com.bytemiracle.base.framework.utils.EasySharedPreference;\r\nimport com.bytemiracle.base.framework.utils.ListUtils;\r\nimport com.bytemiracle.base.framework.utils.NetUtil;\r\nimport com.bytemiracle.base.framework.utils.UniqueIdUtil;\r\nimport com.bytemiracle.base.framework.utils.XToastUtils;\r\nimport com.bytemiracle.base.framework.view.indicator.Indicator;\r\nimport com.bytemiracle.base.framework.view.indicator.IndicatorTextView;\r\nimport com.bytemiracle.project.R;\r\nimport com.bytemiracle.project.settings.SettingPresenter;\r\nimport com.bytemiracle.project.settings.adapter.ProblemPointAdapter;\r\nimport com.bytemiracle.project.settings.repository.ProblemPoint;\r\nimport com.bytemiracle.project.settings.repository.SettingsRepository;\r\nimport com.luck.picture.lib.PictureSelector;\r\nimport com.luck.picture.lib.config.PictureConfig;\r\nimport com.luck.picture.lib.entity.LocalMedia;\r\nimport com.xuexiang.xhttp2.XHttp;\r\nimport com.xuexiang.xhttp2.callback.SimpleCallBack;\r\nimport com.xuexiang.xhttp2.callback.impl.IProgressResponseCallBack;\r\nimport com.xuexiang.xhttp2.exception.ApiException;\r\nimport com.xuexiang.xui.utils.WidgetUtils;\r\nimport com.xuexiang.xui.widget.dialog.LoadingDialog;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\nimport butterknife.BindView;\r\n\r\n/**\r\n * 类功能：意见反馈\r\n *\r\n * @author gwwang\r\n * @date 2021/1/7 13:57\r\n */\r\n@FragmentTag(name = \"意见反馈\")\r\npublic class FeedbackFragment extends BaseSubFragment implements CommonAsyncListener<Integer> {\r\n\r\n    @BindView(R.id.grid_points_container)\r\n    GridView gridPointsContainer;\r\n    @BindView(R.id.btn_commit)\r\n    Button btnCommit;\r\n    @BindView(R.id.indicator_1)\r\n    IndicatorTextView indicator1;\r\n    @BindView(R.id.indicator_2)\r\n    IndicatorTextView indicator2;\r\n    @BindView(R.id.indicator_3)\r\n    IndicatorTextView indicator3;\r\n    @BindView(R.id.indicator_4)\r\n    IndicatorTextView indicator4;\r\n    @BindView(R.id.et_problem_detail)\r\n    EditText et_problem_detail;\r\n    @BindView(R.id.et_contact_method)\r\n    EditText et_contact_method;\r\n    @BindView(R.id.iv_add_picture)\r\n    ImageView ivAddPicture;\r\n    @BindView(R.id.ll_picture_container)\r\n    LinearLayout llPictureContainer;\r\n\r\n    private List<ProblemPoint> problemPoints;\r\n    private ProblemPointAdapter adapter;\r\n    private SettingPresenter settingPresenter;\r\n    private List<File> feedbackPictureList = new ArrayList<>();\r\n    LoadingDialog mLoadingDialog;\r\n\r\n    int problemsType = 0;\r\n\r\n    @Override\r\n    protected int getLayoutId() {\r\n        return R.layout.fragment_setting_feedback;\r\n    }\r\n\r\n    @Override\r\n    protected void initViews() {\r\n        super.initViews();\r\n        int redValue = getContext().getColor(R.color.app_common_dark_red);\r\n        int indicatorPadding = getContext().getResources().getDimensionPixelSize(R.dimen.dp_10);\r\n        Indicator indicatorConfig = new Indicator.Build().color(redValue).configType(Indicator.Type.STAR).padding(indicatorPadding).create();\r\n        indicator1.showIndicator(indicatorConfig);\r\n        indicator2.showIndicator(indicatorConfig);\r\n\r\n        gridPointsContainer.setAdapter(adapter = new ProblemPointAdapter(getContext(), this));\r\n        btnCommit.setOnClickListener(this::clickCommitButton);\r\n        ivAddPicture.setOnClickListener(this::clickAddPicture);\r\n        mLoadingDialog = WidgetUtils.getLoadingDialog(getContext())\r\n                .setIconScale(0.4F)\r\n                .setLoadingSpeed(8);\r\n\r\n        problemPoints = SettingsRepository.provideProblemPoints();\r\n        adapter.setProblemPoints(problemPoints);\r\n        //默认选中0\r\n        settingPresenter = new SettingPresenter();\r\n        settingPresenter.checkedSingleItem(problemPoints, 0);\r\n        adapter.notifyDataSetChanged();\r\n    }\r\n\r\n    private boolean isAvailable() {\r\n        if (TextUtils.isEmpty(et_problem_detail.getText())) {\r\n            XToastUtils.info(\"请输入遇到问题的描述\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 点击提交按钮\r\n     *\r\n     * @param view\r\n     */\r\n    private void clickCommitButton(View view) {\r\n        if (!isAvailable()) {\r\n            return;\r\n        }\r\n        //将意见反馈信息保存到后端\r\n        if (NetUtil.getNetWorkStart(getContext()) != 1) {\r\n            mLoadingDialog.updateMessage(\"正在提交……\");\r\n            mLoadingDialog.show();\r\n            String userId = EasySharedPreference.get().getString(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_ID, null);\r\n            String username = EasySharedPreference.get().getString(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_NICKNAME, null);\r\n            for (int i = 0; i < problemPoints.size(); i++) {\r\n                if (problemPoints.get(i).isChecked()) {\r\n                    problemsType = i;\r\n                }\r\n            }\r\n            String userMobile = EasySharedPreference.get().getString(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_MOBILE, null);\r\n            Map<String, Object> feedbackParams = new HashMap() {\r\n                {\r\n                    put(\"machineCode\", UniqueIdUtil.getDeviceId(getContext()));\r\n                    put(\"userId\", userId == null ? null : Long.parseLong(userId));\r\n                    put(\"username\", username);\r\n                    put(\"problemsType\", problemsType);\r\n                    if (StringUtils.isNotEmpty(et_problem_detail.getText())) {\r\n                        put(\"opinionDetails\", et_problem_detail.getText());\r\n                    }\r\n                    //输入的联系方式优先，如果没有使用用户表的联系信息\r\n                    if (!StringUtils.isEmpty(et_contact_method.getText())) {\r\n                        put(\"contact\", et_contact_method.getText());\r\n                    } else if (!StringUtils.isEmpty(userMobile)) {\r\n                        put(\"contact\", userMobile);\r\n                    }\r\n                }\r\n            };\r\n            //调用server端接口,因为此接口数据量涉及图片较大，故超时时间设为2min\r\n            XHttp.post(\"smart-server/app/submitFeedback\").baseUrl(ConstantsUtil.SERVER_ADDRESS)\r\n                    .timeOut(2 * 60 * 1000)\r\n                    .params(feedbackParams).keepJson(true)\r\n                    .uploadFiles(\"files\", feedbackPictureList, new IProgressResponseCallBack() {\r\n                        /**\r\n                         * 回调进度\r\n                         *\r\n                         * @param bytesWritten  当前读取响应体字节长度\r\n                         * @param contentLength 总长度\r\n                         * @param done          是否读取完成\r\n                         */\r\n                        @Override\r\n                        public void onResponseProgress(long bytesWritten, long contentLength, boolean done) {\r\n                        }\r\n                    })\r\n                    .execute(new SimpleCallBack<String>() {\r\n                        @Override\r\n                        public void onSuccess(String response) {\r\n                            mLoadingDialog.dismiss();\r\n                            XToastUtils.success(\"意见反馈提交成功\");\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(ApiException e) {\r\n                            mLoadingDialog.dismiss();\r\n                            XToastUtils.error(\"意见反馈提交失败\");\r\n                        }\r\n                    });\r\n        } else {\r\n            XToastUtils.error(\"请先连接网络，在进行意见反馈提交\");\r\n        }\r\n    }\r\n\r\n    private void updatePictureItem(List<File> feedbackPictureList) {\r\n        if (!ListUtils.isEmpty(feedbackPictureList)) {\r\n            settingPresenter.setProblemPictureItem(llPictureContainer,\r\n                    feedbackPictureList, data -> {\r\n                        PreviewUtils.viewImage(getActivity(), data.getAbsolutePath(), \"问题预览\");\r\n                    });\r\n        }\r\n        llPictureContainer.addView(ivAddPicture);\r\n    }\r\n\r\n    /**\r\n     * 点击增加图片按钮\r\n     *\r\n     * @param view\r\n     */\r\n    private void clickAddPicture(View view) {\r\n        //打开照片选择器\r\n        feedbackPictureList.clear();\r\n        PreviewUtils.getPictureSelector(this, 5)\r\n                .forResult(PictureConfig.CHOOSE_REQUEST);\r\n    }\r\n\r\n    @Override\r\n    public void doSomething(Integer position) {\r\n        settingPresenter.checkedSingleItem(problemPoints, position);\r\n        adapter.notifyDataSetChanged();\r\n    }\r\n\r\n    @Override\r\n    protected SubTitleConfig getSubTitleConfig() {\r\n        SubTitleConfig subTitleConfig = new SubTitleConfig();\r\n        subTitleConfig.rightConfig = new SubTitleConfig.RightConfig(SubTitleConfig.ViewType.EMPTY);\r\n        subTitleConfig.titleText = new AnnotationPresenter(this.getClass()).findDefinedFragmentTag();\r\n        return subTitleConfig;\r\n    }\r\n\r\n    @Override\r\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n        if (resultCode == Activity.RESULT_OK && requestCode == PictureConfig.CHOOSE_REQUEST) {\r\n            List<LocalMedia> selectList = PictureSelector.obtainMultipleResult(data);\r\n            if (selectList == null || selectList.size() <= 0) {\r\n                return;\r\n            }\r\n            for (LocalMedia media : selectList) {\r\n                File file = new File(media.getCompressPath());\r\n                feedbackPictureList.add(file);\r\n            }\r\n            updatePictureItem(feedbackPictureList);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/settings/subfragment/FeedbackFragment.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/settings/subfragment/FeedbackFragment.java	(date 1615539173438)
@@ -14,6 +14,8 @@
 import com.bytemiracle.base.framework.fragment.FragmentTag;
 import com.bytemiracle.base.framework.fragment.subfragment.BaseSubFragment;
 import com.bytemiracle.base.framework.fragment.subfragment.config.SubTitleConfig;
+import com.bytemiracle.base.framework.http.OkGoHttp;
+import com.bytemiracle.base.framework.listener.CommonAsync2Listener;
 import com.bytemiracle.base.framework.listener.CommonAsyncListener;
 import com.bytemiracle.base.framework.preview.PreviewUtils;
 import com.bytemiracle.base.framework.utils.ConstantsUtil;
@@ -32,10 +34,6 @@
 import com.luck.picture.lib.PictureSelector;
 import com.luck.picture.lib.config.PictureConfig;
 import com.luck.picture.lib.entity.LocalMedia;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.callback.SimpleCallBack;
-import com.xuexiang.xhttp2.callback.impl.IProgressResponseCallBack;
-import com.xuexiang.xhttp2.exception.ApiException;
 import com.xuexiang.xui.utils.WidgetUtils;
 import com.xuexiang.xui.widget.dialog.LoadingDialog;
 
@@ -162,31 +160,21 @@
                     }
                 }
             };
+
             //调用server端接口,因为此接口数据量涉及图片较大，故超时时间设为2min
-            XHttp.post("smart-server/app/submitFeedback").baseUrl(ConstantsUtil.SERVER_ADDRESS)
-                    .timeOut(2 * 60 * 1000)
-                    .params(feedbackParams).keepJson(true)
-                    .uploadFiles("files", feedbackPictureList, new IProgressResponseCallBack() {
-                        /**
-                         * 回调进度
-                         *
-                         * @param bytesWritten  当前读取响应体字节长度
-                         * @param contentLength 总长度
-                         * @param done          是否读取完成
-                         */
+            OkGoHttp.newUploadRequest().asyncUploadRequest("smart-server/app/submitFeedback",
+                    feedbackParams,
+                    "files",
+                    feedbackPictureList,
+                    new CommonAsync2Listener() {
                         @Override
-                        public void onResponseProgress(long bytesWritten, long contentLength, boolean done) {
-                        }
-                    })
-                    .execute(new SimpleCallBack<String>() {
-                        @Override
-                        public void onSuccess(String response) {
+                        public void doSomething1(Object data) {
                             mLoadingDialog.dismiss();
                             XToastUtils.success("意见反馈提交成功");
                         }
 
                         @Override
-                        public void onError(ApiException e) {
+                        public void doSomething2(Object data) {
                             mLoadingDialog.dismiss();
                             XToastUtils.error("意见反馈提交失败");
                         }
Index: x-library.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//为Project加入X-Library依赖\r\nproject.configurations.each { configuration ->\r\n    if (configuration.name == \"implementation\") {\r\n        //XUI框架\r\n        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys:XUI:1.1.3'))\r\n\r\n        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys.SmartRefreshLayout:refresh-header:1.1.5'))\r\n        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys.SmartRefreshLayout:refresh-layout:1.1.5'))\r\n        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys:RxUtil2:1.1.5'))\r\n\r\n        //XUtil工具类\r\n        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys.XUtil:xutil-core:1.1.7'))\r\n        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys.XUtil:xutil-sub:1.1.7'))\r\n        //XUpdate版本更新\r\n        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys:XUpdate:1.1.4'))\r\n        //XHttp2\r\n        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys:XHttp2:1.0.3'))\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- x-library.gradle	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ x-library.gradle	(date 1615785370485)
@@ -11,10 +11,6 @@
         //XUtil工具类
         configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys.XUtil:xutil-core:1.1.7'))
         configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys.XUtil:xutil-sub:1.1.7'))
-        //XUpdate版本更新
-        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys:XUpdate:1.1.4'))
-        //XHttp2
-        configuration.dependencies.add(getProject().dependencies.create('com.github.xuexiangjys:XHttp2:1.0.3'))
     }
 }
 
Index: app/src/main/java/com/bytemiracle/project/settings/subfragment/AccountFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.project.settings.subfragment;\r\n\r\nimport android.text.TextUtils;\r\nimport android.util.DisplayMetrics;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.view.WindowManager;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.TextView;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.bytemiracle.base.framework.GlobalInstanceHolder;\r\nimport com.bytemiracle.base.framework.fragment.AnnotationPresenter;\r\nimport com.bytemiracle.base.framework.fragment.FragmentTag;\r\nimport com.bytemiracle.base.framework.fragment.subfragment.BaseSubFragment;\r\nimport com.bytemiracle.base.framework.fragment.subfragment.config.SubTitleConfig;\r\nimport com.bytemiracle.base.framework.utils.ConstantsUtil;\r\nimport com.bytemiracle.base.framework.utils.EasySharedPreference;\r\nimport com.bytemiracle.base.framework.utils.NetUtil;\r\nimport com.bytemiracle.base.framework.utils.UniqueIdUtil;\r\nimport com.bytemiracle.base.framework.utils.XToastUtils;\r\nimport com.bytemiracle.project.R;\r\nimport com.bytemiracle.project.contacts.controller.ContactsPresenter;\r\nimport com.bytemiracle.project.settings.SettingPresenter;\r\nimport com.bytemiracle.project.settings.repository.SettingsRepository;\r\nimport com.xuexiang.xhttp2.XHttp;\r\nimport com.xuexiang.xhttp2.callback.SimpleCallBack;\r\nimport com.xuexiang.xhttp2.exception.ApiException;\r\nimport com.xuexiang.xui.widget.dialog.materialdialog.MaterialDialog;\r\nimport com.xuexiang.xutil.XUtil;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport butterknife.BindView;\r\n\r\n/**\r\n * 类功能：账号信息\r\n *\r\n * @author gwwang\r\n * @date 2021/1/7 13:57\r\n */\r\n@FragmentTag(name = \"账号信息\")\r\npublic class AccountFragment extends BaseSubFragment {\r\n    /**\r\n     * 个人信息布局容器\r\n     */\r\n    @BindView(R.id.ll_personal_info_container)\r\n    ViewGroup llPersonalInfoContainer;\r\n    @BindView(R.id.btn_change_password)\r\n    View btnChangePassword;\r\n    @BindView(R.id.person_resume)\r\n    TextView personResume;\r\n    private SettingPresenter settingPresenter;\r\n\r\n    @Override\r\n    protected int getLayoutId() {\r\n        return R.layout.fragment_setting_account;\r\n    }\r\n\r\n    @Override\r\n    protected void initViews() {\r\n        super.initViews();\r\n        btnChangePassword.setOnClickListener(this::changePassword);\r\n        //设置数据\r\n        settingPresenter = new SettingPresenter();\r\n\r\n        String accountInfo = EasySharedPreference.get().getString(ConstantsUtil.THIS_MACHINE_BIND_ACCOUNT_INFO, \"\");\r\n        if (StringUtils.isEmpty(accountInfo)) {\r\n            //全部为空\r\n            settingPresenter.setPersonalInfoViews(llPersonalInfoContainer, SettingsRepository.providePersonalInfos());\r\n        } else {\r\n            //展示信息\r\n            JSONObject accountJson = JSONObject.parseObject(accountInfo);\r\n\r\n            personResume.append(StringUtils.isEmpty(accountJson.getString(\"description\")) ? \"\" :\r\n                    \"        \" + accountJson.getString(\"description\"));\r\n            settingPresenter.setPersonalInfoViews(llPersonalInfoContainer, SettingsRepository.providePersonalInfos(accountJson));\r\n            llPersonalInfoContainer.setOnClickListener(v -> new ContactsPresenter().openContactActivity(getActivity()));\r\n        }\r\n    }\r\n\r\n    private void changePassword(View view) {\r\n        final MaterialDialog dialog = new MaterialDialog.Builder(getContext())\r\n                .customView(R.layout.dialog_change_password, true)\r\n                .title(\"修改密码\")\r\n                .cancelable(false)\r\n                .build();\r\n\r\n        TextView imei = dialog.findViewById(R.id.tv_imei);\r\n        imei.setText(UniqueIdUtil.getDeviceId(getContext()));\r\n\r\n        EditText oldPwd = dialog.findViewById(R.id.oldPwd);\r\n        EditText newPwd = dialog.findViewById(R.id.newPwd);\r\n        EditText confirmPwd = dialog.findViewById(R.id.confirmPwd);\r\n        Button cancel = dialog.findViewById(R.id.cancel);\r\n        Button confirm = dialog.findViewById(R.id.confirm);\r\n\r\n        cancel.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                dialog.dismiss();\r\n            }\r\n        });\r\n        confirm.setOnClickListener(v -> {\r\n            if (!isAvailable(oldPwd, confirmPwd, newPwd)) {\r\n                return;\r\n            }\r\n            if (NetUtil.getNetWorkStart(getContext()) == 1) {\r\n                //没有网络直接提示失败\r\n                XToastUtils.error(\"修改密码失败，请先连接网络\");\r\n            } else {\r\n                Map<String, Object> rePassParams = new HashMap() {\r\n                    {\r\n                        put(\"macAddress\", imei.getText().toString());\r\n                        put(\"pass\", oldPwd.getText().toString());\r\n                        put(\"newPass\", newPwd.getText().toString());\r\n                    }\r\n                };\r\n                XHttp.post(\"smart-server/app/rePass\").baseUrl(ConstantsUtil.SERVER_ADDRESS)\r\n                        .params(rePassParams)\r\n                        .keepJson(true)\r\n                        .execute(new SimpleCallBack<String>() {\r\n                            @Override\r\n                            public void onSuccess(String response) {\r\n                                dialog.dismiss();\r\n                                com.alibaba.fastjson.JSONObject jsonObject = com.alibaba.fastjson.JSONObject.parseObject(response);\r\n                                if (jsonObject.getInteger(\"code\") != 0) {\r\n                                    XToastUtils.error(jsonObject.getString(\"msg\"));\r\n                                    return;\r\n                                }\r\n                                //修改成功\r\n                                //1.将新密码写到pref中\r\n                                EasySharedPreference.get().putString(ConstantsUtil.APP_ASSISTANT_PASSWORD, newPwd.getText().toString());\r\n                                //2.返回首页\r\n                                XToastUtils.success(\"密码修改成功，请使用新密码重新登录\");\r\n                                GlobalInstanceHolder.mainHandler().postDelayed(() -> XUtil.get().exitApp(), 500);\r\n                            }\r\n\r\n                            @Override\r\n                            public void onError(ApiException e) {\r\n                                dialog.dismiss();\r\n                                Log.e(\"AccountFragment\", \"修改密码异常\");\r\n                            }\r\n                        });\r\n            }\r\n        });\r\n\r\n        dialog.show();\r\n\r\n        DisplayMetrics dm = new DisplayMetrics();\r\n        getActivity().getWindowManager().getDefaultDisplay().getMetrics(dm);\r\n        WindowManager.LayoutParams lp = dialog.getWindow().getAttributes();\r\n        lp.width = (int) (dm.widthPixels * 0.3);\r\n        dialog.getWindow().setAttributes(lp);\r\n    }\r\n\r\n    /**\r\n     * 判断输入框内容是否有效\r\n     *\r\n     * @param oldPwd\r\n     * @param confirmPwd\r\n     * @param newPwd\r\n     * @return\r\n     */\r\n    private boolean isAvailable(EditText oldPwd, EditText confirmPwd, EditText newPwd) {\r\n        if (TextUtils.isEmpty(oldPwd.getText().toString())) {\r\n            XToastUtils.error(\"输入旧密码不能为空\");\r\n            return false;\r\n        }\r\n        if (TextUtils.isEmpty(newPwd.getText().toString()) || newPwd.getText().toString().length() < 6) {\r\n            XToastUtils.error(\"新密码长度最低六位\");\r\n            return false;\r\n        }\r\n        if (TextUtils.isEmpty(confirmPwd.getText().toString())) {\r\n            XToastUtils.error(\"确认密码不能为空\");\r\n            return false;\r\n        }\r\n        if (!(newPwd.getText().toString().equals(confirmPwd.getText().toString()))) {\r\n            XToastUtils.error(\"两次输入密码不一致\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    protected SubTitleConfig getSubTitleConfig() {\r\n        SubTitleConfig subTitleConfig = new SubTitleConfig();\r\n        subTitleConfig.rightConfig = new SubTitleConfig.RightConfig(SubTitleConfig.ViewType.ICON, R.drawable.icon_head_default);\r\n        subTitleConfig.titleText = new AnnotationPresenter(this.getClass()).findDefinedFragmentTag();\r\n        return subTitleConfig;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/settings/subfragment/AccountFragment.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/settings/subfragment/AccountFragment.java	(date 1615785116604)
@@ -2,7 +2,6 @@
 
 import android.text.TextUtils;
 import android.util.DisplayMetrics;
-import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.WindowManager;
@@ -10,12 +9,13 @@
 import android.widget.EditText;
 import android.widget.TextView;
 
-import com.alibaba.fastjson.JSONObject;
 import com.bytemiracle.base.framework.GlobalInstanceHolder;
 import com.bytemiracle.base.framework.fragment.AnnotationPresenter;
 import com.bytemiracle.base.framework.fragment.FragmentTag;
 import com.bytemiracle.base.framework.fragment.subfragment.BaseSubFragment;
 import com.bytemiracle.base.framework.fragment.subfragment.config.SubTitleConfig;
+import com.bytemiracle.base.framework.http.OkGoHttp;
+import com.bytemiracle.base.framework.http.OnReceiveResult;
 import com.bytemiracle.base.framework.utils.ConstantsUtil;
 import com.bytemiracle.base.framework.utils.EasySharedPreference;
 import com.bytemiracle.base.framework.utils.NetUtil;
@@ -23,11 +23,9 @@
 import com.bytemiracle.base.framework.utils.XToastUtils;
 import com.bytemiracle.project.R;
 import com.bytemiracle.project.contacts.controller.ContactsPresenter;
+import com.bytemiracle.project.login.bean.LoginResponse;
 import com.bytemiracle.project.settings.SettingPresenter;
 import com.bytemiracle.project.settings.repository.SettingsRepository;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.callback.SimpleCallBack;
-import com.xuexiang.xhttp2.exception.ApiException;
 import com.xuexiang.xui.widget.dialog.materialdialog.MaterialDialog;
 import com.xuexiang.xutil.XUtil;
 
@@ -69,17 +67,15 @@
         //设置数据
         settingPresenter = new SettingPresenter();
 
-        String accountInfo = EasySharedPreference.get().getString(ConstantsUtil.THIS_MACHINE_BIND_ACCOUNT_INFO, "");
-        if (StringUtils.isEmpty(accountInfo)) {
+        LoginResponse.DataDTO accountInfo = EasySharedPreference.get().getObject(ConstantsUtil.THIS_MACHINE_BIND_ACCOUNT_INFO, LoginResponse.DataDTO.class);
+        if (null == accountInfo) {
             //全部为空
             settingPresenter.setPersonalInfoViews(llPersonalInfoContainer, SettingsRepository.providePersonalInfos());
         } else {
             //展示信息
-            JSONObject accountJson = JSONObject.parseObject(accountInfo);
-
-            personResume.append(StringUtils.isEmpty(accountJson.getString("description")) ? "" :
-                    "        " + accountJson.getString("description"));
-            settingPresenter.setPersonalInfoViews(llPersonalInfoContainer, SettingsRepository.providePersonalInfos(accountJson));
+            personResume.append(StringUtils.isEmpty(accountInfo.getDescription()) ? "" :
+                    "        " + accountInfo.getDescription());
+            settingPresenter.setPersonalInfoViews(llPersonalInfoContainer, SettingsRepository.providePersonalInfos(accountInfo));
             llPersonalInfoContainer.setOnClickListener(v -> new ContactsPresenter().openContactActivity(getActivity()));
         }
     }
@@ -121,32 +117,35 @@
                         put("newPass", newPwd.getText().toString());
                     }
                 };
-                XHttp.post("smart-server/app/rePass").baseUrl(ConstantsUtil.SERVER_ADDRESS)
-                        .params(rePassParams)
-                        .keepJson(true)
-                        .execute(new SimpleCallBack<String>() {
-                            @Override
-                            public void onSuccess(String response) {
-                                dialog.dismiss();
-                                com.alibaba.fastjson.JSONObject jsonObject = com.alibaba.fastjson.JSONObject.parseObject(response);
-                                if (jsonObject.getInteger("code") != 0) {
-                                    XToastUtils.error(jsonObject.getString("msg"));
-                                    return;
-                                }
-                                //修改成功
-                                //1.将新密码写到pref中
-                                EasySharedPreference.get().putString(ConstantsUtil.APP_ASSISTANT_PASSWORD, newPwd.getText().toString());
-                                //2.返回首页
-                                XToastUtils.success("密码修改成功，请使用新密码重新登录");
-                                GlobalInstanceHolder.mainHandler().postDelayed(() -> XUtil.get().exitApp(), 500);
-                            }
+
+                OkGoHttp.newPostRequest().asyncRequestApiUseForm("smart-server/app/rePass", rePassParams, new OnReceiveResult() {
+                    @Override
+                    public void onSuccess(Object resultBean) {
+
+                    }
+
+                    @Override
+                    public void onJson(String json) {
+                        dialog.dismiss();
+                        com.alibaba.fastjson.JSONObject jsonObject = com.alibaba.fastjson.JSONObject.parseObject(json);
+                        if (jsonObject.getInteger("code") != 0) {
+                            XToastUtils.error(jsonObject.getString("msg"));
+                            return;
+                        }
+                        //修改成功
+                        //1.将新密码写到pref中
+                        EasySharedPreference.get().putString(ConstantsUtil.APP_ASSISTANT_PASSWORD, newPwd.getText().toString());
+                        //2.返回首页
+                        XToastUtils.success("密码修改成功，请使用新密码重新登录");
+                        GlobalInstanceHolder.mainHandler().postDelayed(() -> XUtil.get().exitApp(), 500);
+                    }
 
-                            @Override
-                            public void onError(ApiException e) {
-                                dialog.dismiss();
-                                Log.e("AccountFragment", "修改密码异常");
-                            }
-                        });
+                    @Override
+                    public void onFailed(String reason) {
+                        dialog.dismiss();
+                        XToastUtils.info(reason);
+                    }
+                });
             }
         });
 
Index: smart-base/src/main/java/com/bytemiracle/base/framework/BaseApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.base.framework;\r\n\r\nimport android.app.ActivityManager;\r\nimport android.app.Application;\r\nimport android.content.Context;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\n\r\nimport java.util.List;\r\n\r\n\r\n/**\r\n * 类功能：TODO:\r\n *\r\n * @author gwwang\r\n * @date 2021/2/25 10:14\r\n */\r\npublic class BaseApplication extends Application {\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        GlobalInstanceHolder.setApplicationContext(this);\r\n        GlobalInstanceHolder.setMainHandler(new Handler(Looper.getMainLooper()));\r\n    }\r\n\r\n\r\n    public String getProcessName(Context cxt) {\r\n        int pid = android.os.Process.myPid();\r\n        ActivityManager am = (ActivityManager) cxt.getSystemService(Context.ACTIVITY_SERVICE);\r\n        List<ActivityManager.RunningAppProcessInfo> runningApps = am.getRunningAppProcesses();\r\n        if (runningApps == null) {\r\n            return null;\r\n        }\r\n        for (ActivityManager.RunningAppProcessInfo procInfo : runningApps) {\r\n            if (procInfo.pid == pid) {\r\n                return procInfo.processName;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/BaseApplication.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/BaseApplication.java	(date 1615785738326)
@@ -6,6 +6,8 @@
 import android.os.Handler;
 import android.os.Looper;
 
+import com.bytemiracle.base.framework.http.OkGoHttp;
+
 import java.util.List;
 
 
@@ -21,6 +23,7 @@
         super.onCreate();
         GlobalInstanceHolder.setApplicationContext(this);
         GlobalInstanceHolder.setMainHandler(new Handler(Looper.getMainLooper()));
+        OkGoHttp.init(this);
     }
 
 
Index: smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/ProgressLoader.java
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/ProgressLoader.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/ProgressLoader.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
@@ -1,45 +0,0 @@
-package com.bytemiracle.base.framework.view.loaderView;
-
-import android.content.Context;
-
-import com.xuexiang.xhttp2.subsciber.impl.IProgressLoader;
-
-/**
- * 创建进度加载者
- *
- * @author xuexiang
- * @since 2019-07-02 12:51
- */
-public final class ProgressLoader {
-
-    private ProgressLoader() {
-        throw new UnsupportedOperationException("u can't instantiate me...");
-    }
-
-    private static IProgressLoaderFactory sIProgressLoaderFactory = new MiniProgressLoaderFactory();
-
-    public static void setIProgressLoaderFactory(IProgressLoaderFactory sIProgressLoaderFactory) {
-        ProgressLoader.sIProgressLoaderFactory = sIProgressLoaderFactory;
-    }
-
-    /**
-     * 创建进度加载者
-     *
-     * @param context
-     * @return
-     */
-    public static IProgressLoader create(Context context) {
-        return sIProgressLoaderFactory.create(context);
-    }
-
-    /**
-     * 创建进度加载者
-     *
-     * @param context
-     * @param message 默认提示信息
-     * @return
-     */
-    public static IProgressLoader create(Context context, String message) {
-        return sIProgressLoaderFactory.create(context, message);
-    }
-}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/http/XHttpServiceImpl.java
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/http/XHttpServiceImpl.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/http/XHttpServiceImpl.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
@@ -1,91 +0,0 @@
-package com.bytemiracle.base.framework.http;
-
-import androidx.annotation.NonNull;
-
-import com.bytemiracle.base.framework.utils.XToastUtils;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.XHttpSDK;
-import com.xuexiang.xhttp2.callback.DownloadProgressCallBack;
-import com.xuexiang.xhttp2.callback.SimpleCallBack;
-import com.xuexiang.xhttp2.exception.ApiException;
-import com.xuexiang.xupdate.proxy.IUpdateHttpService;
-import com.xuexiang.xutil.file.FileUtils;
-import com.xuexiang.xutil.net.JsonUtil;
-
-import java.util.Map;
-
-/**
- * XHttp2实现的请求更新
- *
- * @author xuexiang
- * @since 2018/8/12 上午11:46
- */
-public class XHttpServiceImpl {
-
-    public void asyncGet(@NonNull String url, @NonNull Map<String, Object> params, @NonNull final IUpdateHttpService.Callback callBack) {
-        XHttp.get(url)
-                .params(params)
-                .keepJson(true)
-                .execute(new SimpleCallBack<String>() {
-                    @Override
-                    public void onSuccess(String response) throws Throwable {
-                        callBack.onSuccess(response);
-                    }
-
-                    @Override
-                    public void onError(ApiException e) {
-                        callBack.onError(e);
-                    }
-                });
-    }
-
-    public void asyncPost(@NonNull String url, @NonNull Map<String, Object> params, @NonNull final IUpdateHttpService.Callback callBack) {
-        XHttp.post(url)
-                .upJson(JsonUtil.toJson(params))
-                .keepJson(true)
-                .execute(new SimpleCallBack<String>() {
-                    @Override
-                    public void onSuccess(String response) throws Throwable {
-                        callBack.onSuccess(response);
-                    }
-
-                    @Override
-                    public void onError(ApiException e) {
-                        callBack.onError(e);
-                    }
-                });
-    }
-
-    public void download(@NonNull String url, @NonNull String path, @NonNull String fileName, @NonNull final IUpdateHttpService.DownloadCallback callback) {
-        XHttpSDK.addRequest(url, XHttp.downLoad(url)
-                .savePath(path)
-                .saveName(fileName)
-                .isUseBaseUrl(false)
-                .execute(new DownloadProgressCallBack<String>() {
-                    @Override
-                    public void onStart() {
-                        callback.onStart();
-                    }
-
-                    @Override
-                    public void onError(ApiException e) {
-                        callback.onError(e);
-                    }
-
-                    @Override
-                    public void update(long downLoadSize, long totalSize, boolean done) {
-                        callback.onProgress(downLoadSize / (float) totalSize, totalSize);
-                    }
-
-                    @Override
-                    public void onComplete(String path) {
-                        callback.onSuccess(FileUtils.getFileByPath(path));
-                    }
-                }));
-    }
-
-    public void cancelDownload(@NonNull String url) {
-        XToastUtils.info("已取消更新");
-        XHttpSDK.cancelRequest(url);
-    }
-}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/MiniProgressLoaderFactory.java
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/MiniProgressLoaderFactory.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/MiniProgressLoaderFactory.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
@@ -1,24 +0,0 @@
-package com.bytemiracle.base.framework.view.loaderView;
-
-import android.content.Context;
-
-import com.xuexiang.xhttp2.subsciber.impl.IProgressLoader;
-
-/**
- * 迷你加载框创建工厂
- *
- * @author xuexiang
- * @since 2019-11-18 23:23
- */
-public class MiniProgressLoaderFactory implements IProgressLoaderFactory {
-
-    @Override
-    public IProgressLoader create(Context context) {
-        return new MiniLoadingDialogLoader(context);
-    }
-
-    @Override
-    public IProgressLoader create(Context context, String message) {
-        return new MiniLoadingDialogLoader(context, message);
-    }
-}
Index: app/src/main/java/com/bytemiracle/project/contacts/bean/TimelyCommunicationDto.java
===================================================================
--- app/src/main/java/com/bytemiracle/project/contacts/bean/TimelyCommunicationDto.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/contacts/bean/TimelyCommunicationDto.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
@@ -1,147 +0,0 @@
-package com.bytemiracle.project.contacts.bean;
-
-import java.io.Serializable;
-
-/**
- * 及时通讯联系人表
- */
-public class TimelyCommunicationDto implements Serializable {
-    /**
-     * 主键ID
-     */
-    private String id;
-
-    /**
-     * 用户名
-     */
-    private String username;
-
-    /**
-     * 真实姓名
-     */
-    private String nickname;
-    /**
-     * 头像
-     */
-    private String headImgUrl;
-    /**
-     * 电话号码
-     */
-    private String mobile;
-    /**
-     * 性别
-     */
-    private Integer sex;
-    /**
-     * 邮箱
-     */
-    private String email;
-
-    /**
-     * 职位
-     */
-    private String position;
-
-    /**
-     * 个人履历
-     */
-    private String description;
-
-    /**
-     * token信息
-     */
-    private String token;
-
-    /**
-     * machineCode
-     */
-    private String machineCode;
-
-    public String getId() {
-        return id;
-    }
-
-    public void setId(String id) {
-        this.id = id;
-    }
-
-    public String getUsername() {
-        return username;
-    }
-
-    public void setUsername(String username) {
-        this.username = username;
-    }
-
-    public String getNickname() {
-        return nickname;
-    }
-
-    public void setNickname(String nickname) {
-        this.nickname = nickname;
-    }
-
-    public String getHeadImgUrl() {
-        return headImgUrl;
-    }
-
-    public void setHeadImgUrl(String headImgUrl) {
-        this.headImgUrl = headImgUrl;
-    }
-
-    public String getMobile() {
-        return mobile;
-    }
-
-    public void setMobile(String mobile) {
-        this.mobile = mobile;
-    }
-
-    public Integer getSex() {
-        return sex;
-    }
-
-    public void setSex(Integer sex) {
-        this.sex = sex;
-    }
-
-    public String getEmail() {
-        return email;
-    }
-
-    public void setEmail(String email) {
-        this.email = email;
-    }
-
-    public String getPosition() {
-        return position;
-    }
-
-    public void setPosition(String position) {
-        this.position = position;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    public String getToken() {
-        return token;
-    }
-
-    public void setToken(String token) {
-        this.token = token;
-    }
-
-    public String getMachineCode() {
-        return machineCode;
-    }
-
-    public void setMachineCode(String machineCode) {
-        this.machineCode = machineCode;
-    }
-}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/utils/SettingSPUtils.java
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/utils/SettingSPUtils.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/utils/SettingSPUtils.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
@@ -1,80 +0,0 @@
-package com.bytemiracle.base.framework.utils;
-
-import android.content.Context;
-
-import com.xuexiang.xutil.XUtil;
-import com.xuexiang.xutil.data.BaseSPUtil;
-
-/**
- * SharedPreferences管理工具基类
- *
- * @author xuexiang
- * @since 2018/11/27 下午5:16
- */
-public class SettingSPUtils extends BaseSPUtil {
-
-    private static volatile SettingSPUtils sInstance = null;
-
-    private SettingSPUtils(Context context) {
-        super(context);
-    }
-
-    /**
-     * 获取单例
-     *
-     * @return
-     */
-    public static SettingSPUtils getInstance() {
-        if (sInstance == null) {
-            synchronized (SettingSPUtils.class) {
-                if (sInstance == null) {
-                    sInstance = new SettingSPUtils(XUtil.getContext());
-                }
-            }
-        }
-        return sInstance;
-    }
-
-
-    private final String IS_FIRST_OPEN_KEY = "is_first_open_key";
-
-    private final String IS_AGREE_PRIVACY_KEY = "is_agree_privacy_key";
-
-    private final String IS_USE_CUSTOM_THEME_KEY = "is_use_custom_theme_key";
-
-
-    /**
-     * 是否是第一次启动
-     */
-    public boolean isFirstOpen() {
-        return getBoolean(IS_FIRST_OPEN_KEY, true);
-    }
-
-    /**
-     * 设置是否是第一次启动
-     */
-    public void setIsFirstOpen(boolean isFirstOpen) {
-        putBoolean(IS_FIRST_OPEN_KEY, isFirstOpen);
-    }
-
-    /**
-     * @return 是否同意隐私政策
-     */
-    public boolean isAgreePrivacy() {
-        return getBoolean(IS_AGREE_PRIVACY_KEY, false);
-    }
-
-    public void setIsAgreePrivacy(boolean isAgreePrivacy) {
-        putBoolean(IS_AGREE_PRIVACY_KEY, isAgreePrivacy);
-    }
-
-    public boolean isUseCustomTheme() {
-        return getBoolean(IS_USE_CUSTOM_THEME_KEY, false);
-    }
-
-    public void setIsUseCustomTheme(boolean isUseCustomTheme) {
-        putBoolean(IS_USE_CUSTOM_THEME_KEY, isUseCustomTheme);
-    }
-
-
-}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/MiniLoadingDialogLoader.java
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/MiniLoadingDialogLoader.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/MiniLoadingDialogLoader.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
@@ -1,79 +0,0 @@
-package com.bytemiracle.base.framework.view.loaderView;
-
-import android.content.Context;
-import android.content.DialogInterface;
-
-import com.xuexiang.xhttp2.subsciber.impl.IProgressLoader;
-import com.xuexiang.xhttp2.subsciber.impl.OnProgressCancelListener;
-import com.xuexiang.xui.widget.dialog.MiniLoadingDialog;
-
-/**
- * 默认进度加载
- *
- * @author xuexiang
- * @since 2019-11-18 23:07
- */
-public class MiniLoadingDialogLoader implements IProgressLoader {
-    /**
-     * 进度loading弹窗
-     */
-    private MiniLoadingDialog mDialog;
-    /**
-     * 进度框取消监听
-     */
-    private OnProgressCancelListener mOnProgressCancelListener;
-
-    public MiniLoadingDialogLoader(Context context) {
-        this(context, "请求中...");
-    }
-
-    public MiniLoadingDialogLoader(Context context, String msg) {
-        mDialog = new MiniLoadingDialog(context, msg);
-    }
-
-    @Override
-    public boolean isLoading() {
-        return mDialog != null && mDialog.isShowing();
-    }
-
-    @Override
-    public void updateMessage(String msg) {
-        if (mDialog != null) {
-            mDialog.updateMessage(msg);
-        }
-    }
-
-    @Override
-    public void showLoading() {
-        if (mDialog != null && !mDialog.isShowing()) {
-            mDialog.show();
-        }
-    }
-
-    @Override
-    public void dismissLoading() {
-        if (mDialog != null && mDialog.isShowing()) {
-            mDialog.dismiss();
-        }
-    }
-
-    @Override
-    public void setCancelable(boolean flag) {
-        mDialog.setCancelable(flag);
-        if (flag) {
-            mDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
-                @Override
-                public void onCancel(DialogInterface dialogInterface) {
-                    if (mOnProgressCancelListener != null) {
-                        mOnProgressCancelListener.onCancelProgress();
-                    }
-                }
-            });
-        }
-    }
-
-    @Override
-    public void setOnProgressCancelListener(OnProgressCancelListener listener) {
-        mOnProgressCancelListener = listener;
-    }
-}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/IProgressLoaderFactory.java
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/IProgressLoaderFactory.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/view/loaderView/IProgressLoaderFactory.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
@@ -1,33 +0,0 @@
-package com.bytemiracle.base.framework.view.loaderView;
-
-import android.content.Context;
-
-import com.xuexiang.xhttp2.subsciber.impl.IProgressLoader;
-
-/**
- * IProgressLoader的创建工厂实现接口
- *
- * @author xuexiang
- * @since 2019-11-18 23:17
- */
-public interface IProgressLoaderFactory {
-
-
-    /**
-     * 创建进度加载者
-     *
-     * @param context
-     * @return
-     */
-    IProgressLoader create(Context context);
-
-
-    /**
-     * 创建进度加载者
-     *
-     * @param context
-     * @param message 默认提示
-     * @return
-     */
-    IProgressLoader create(Context context, String message);
-}
Index: app/src/main/java/com/bytemiracle/project/mindsemanteme/kdxfsdk/RTASRUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.project.mindsemanteme.kdxfsdk;\r\n\r\nimport android.util.Log;\r\nimport android.widget.EditText;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.alibaba.fastjson.JSONArray;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.bytemiracle.base.framework.listener.CommonAsyncListener;\r\nimport com.bytemiracle.base.framework.utils.ConstantsUtil;\r\nimport com.bytemiracle.project.mindsemanteme.bean.KdxfKey;\r\nimport com.bytemiracle.project.mindsemanteme.kdxfsdk.util.EncryptUtil;\r\nimport com.xuexiang.xhttp2.XHttp;\r\nimport com.xuexiang.xhttp2.callback.SimpleCallBack;\r\nimport com.xuexiang.xhttp2.exception.ApiException;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.java_websocket.WebSocket.READYSTATE;\r\nimport org.java_websocket.client.WebSocketClient;\r\nimport org.java_websocket.drafts.Draft;\r\nimport org.java_websocket.handshake.ServerHandshake;\r\n\r\nimport java.io.RandomAccessFile;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\nimport java.net.URLEncoder;\r\nimport java.nio.ByteBuffer;\r\nimport java.security.cert.CertificateException;\r\nimport java.security.cert.X509Certificate;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.Arrays;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.concurrent.CountDownLatch;\r\n\r\nimport javax.net.ssl.SSLContext;\r\nimport javax.net.ssl.TrustManager;\r\nimport javax.net.ssl.X509TrustManager;\r\n\r\n/**\r\n * 实时转写调用demo\r\n * 此demo只是一个简单的调用示例，不适合用到实际生产环境中\r\n *\r\n * @author white\r\n */\r\npublic class RTASRUtils {\r\n\r\n    // appid\r\n    private static final String APPID = \"5ff510b1\";\r\n\r\n    // appid对应的secret_key\r\n    private static final String SECRET_KEY = \"683c351baf93c7be0c1f018db70386d5\";\r\n\r\n    // 请求地址\r\n    private static final String HOST = \"rtasr.xfyun.cn/v1/ws\";\r\n\r\n    private static final String BASE_URL = \"wss://\" + HOST;\r\n\r\n    private static final String ORIGIN = \"https://\" + HOST;\r\n\r\n    public KdxfKey kdxfKey = KdxfKey.getInstance();\r\n\r\n\r\n    // 音频文件路径\r\n    private static final String AUDIO_PATH = \"./resource/test_1.pcm\";\r\n\r\n    public static MyWebSocketClient myClient;\r\n\r\n    // 每次发送的数据大小 1280 字节\r\n    private static final int CHUNCKED_SIZE = 1280;\r\n\r\n    private static final SimpleDateFormat sdf = new SimpleDateFormat(\"yyy-MM-dd HH:mm:ss.SSS\");\r\n    private static InitAttachViewListener listener;\r\n    private CommonAsyncListener<MyWebSocketClient> initFinishListener;\r\n\r\n    private static ConnectionListener keyInfoListener; //连接账号监听\r\n    private static boolean allowLooperInWebSocket ;\r\n\r\n    public void setListener(InitAttachViewListener listener, CommonAsyncListener<MyWebSocketClient> initFinishListener) {\r\n        this.listener = listener;\r\n        this.initFinishListener = initFinishListener;\r\n    }\r\n\r\n    public static boolean isAllowLooperInWebSocket() {\r\n        return allowLooperInWebSocket;\r\n    }\r\n\r\n    public static void setAllowLooperInWebSocket(boolean allowLooperInWebSocket) {\r\n        RTASRUtils.allowLooperInWebSocket = allowLooperInWebSocket;\r\n    }\r\n\r\n    public interface ConnectionListener{\r\n        Long getKeyId();\r\n    }\r\n\r\n    public interface InitAttachViewListener {\r\n        EditText getAttachView();\r\n    }\r\n\r\n    private static RTASRUtils INSTANCE;\r\n\r\n    public static RTASRUtils instance() {\r\n        if (INSTANCE == null) {\r\n            INSTANCE = new RTASRUtils();\r\n        }\r\n        return INSTANCE;\r\n    }\r\n\r\n\r\n    public void createAsyncClient() {\r\n        getKeyInfo(new CommonAsyncListener<KdxfKey>() {\r\n            @Override\r\n            public void doSomething(KdxfKey key) {\r\n                try {\r\n                    URI url = new URI(BASE_URL + getHandShakeParams(key.getAPPID(), key.getAPIKey()));\r\n                    DraftWithOrigin draft = new DraftWithOrigin(ORIGIN);\r\n                    CountDownLatch handshakeSuccess = new CountDownLatch(1);\r\n                    CountDownLatch connectClose = new CountDownLatch(1);\r\n                    myClient = new MyWebSocketClient(url, draft, handshakeSuccess, connectClose);\r\n                    keyInfoListener = new ConnectionListener() {\r\n                        @Override\r\n                        public Long getKeyId() {\r\n                            return key.getId();\r\n                        }\r\n                    };\r\n                    initFinishListener.doSomething(myClient);\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public void getKeyInfo(CommonAsyncListener<KdxfKey> listener) {\r\n\r\n        XHttp.get(\"smart-server/kdxfkey/getValidKey\").baseUrl(ConstantsUtil.SERVER_ADDRESS).keepJson(true).execute(new SimpleCallBack<String>() {\r\n            @Override\r\n            public void onSuccess(String response) throws URISyntaxException {\r\n                JSONObject responseJson = JSONObject.parseObject(response);\r\n                if (responseJson.getBoolean(\"flag\") ) {\r\n                    String data = responseJson.getString(\"data\");\r\n                    if (StringUtils.isNotEmpty(data)) {\r\n                        JSONObject result = JSONObject.parseObject(data);\r\n                        String appId = result.getString(\"appId\");\r\n                        String apiKey = result.getString(\"apiKey\");\r\n                        Long id = result.getLong(\"id\");\r\n                        kdxfKey.setAPPID(appId);\r\n                        kdxfKey.setAPIKey(apiKey);\r\n                        kdxfKey.setId(id);\r\n                        listener.doSomething(kdxfKey);\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(ApiException e) {\r\n                Log.e(\"\", \"调用科大讯飞账号信息异常!\");\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * 关闭连接\r\n     */\r\n    public void closeWebSocket() {\r\n        if (myClient != null && READYSTATE.OPEN.equals(myClient.getReadyState())) {\r\n            myClient.close();\r\n            myClient = null;\r\n            INSTANCE = null;\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 建立连接\r\n     *\r\n     * @param thisClient\r\n     */\r\n    public void connecting(MyWebSocketClient thisClient) {\r\n        try {\r\n            thisClient.connect();\r\n            while (!myClient.getReadyState().equals(READYSTATE.OPEN)) {\r\n                System.out.println(getCurrentTimeStr() + \"\\t连接中\");\r\n                Thread.sleep(1000);\r\n            }\r\n            // 等待握手成功\r\n            thisClient.handshakeSuccess.await();\r\n        } catch (Exception e) {\r\n            //update();\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void startZy(String path, MyWebSocketClient thisClient) throws URISyntaxException, InterruptedException {\r\n        allowLooperInWebSocket = true;\r\n        while (allowLooperInWebSocket) {\r\n            // 发送音频\r\n            byte[] bytes = new byte[CHUNCKED_SIZE];\r\n            try (RandomAccessFile raf = new RandomAccessFile(path, \"r\")) {\r\n                int len = -1;\r\n                long lastTs = 0;\r\n                while ((len = raf.read(bytes)) != -1) {\r\n                    if (len < CHUNCKED_SIZE) {\r\n                        send(thisClient, bytes = Arrays.copyOfRange(bytes, 0, len));\r\n                        break;\r\n                    }\r\n                    long curTs = System.currentTimeMillis();\r\n                    if (lastTs == 0) {\r\n                        lastTs = System.currentTimeMillis();\r\n                    } else {\r\n                        long s = curTs - lastTs;\r\n                        if (s < 40) {\r\n                            System.out.println(\"error time interval: \" + s + \" ms\");\r\n                        }\r\n                    }\r\n                    send(thisClient, bytes);\r\n                    // 每隔40毫秒发送一次数据\r\n                    Thread.sleep(40);\r\n\r\n                }\r\n                // 发送结束标识\r\n                send(thisClient, \"{\\\"end\\\": true}\".getBytes());\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            // 等待连接关闭\r\n            thisClient.connectClose.await();\r\n\r\n            //??\r\n            break;\r\n        }\r\n    }\r\n\r\n    // 生成握手参数\r\n    public static String getHandShakeParams(String appId, String secretKey) {\r\n        String ts = System.currentTimeMillis() / 1000 + \"\";\r\n        String signa = \"\";\r\n        try {\r\n            signa = EncryptUtil.HmacSHA1Encrypt(EncryptUtil.MD5(appId + ts), secretKey);\r\n            return \"?appid=\" + appId + \"&ts=\" + ts + \"&signa=\" + URLEncoder.encode(signa, \"UTF-8\");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    public static void send(WebSocketClient client, byte[] bytes) {\r\n        if (client.isClosed()) {\r\n            throw new RuntimeException(\"client connect closed!\");\r\n        }\r\n\r\n        client.send(bytes);\r\n    }\r\n\r\n    public static String getCurrentTimeStr() {\r\n        return sdf.format(new Date());\r\n    }\r\n\r\n    public static class MyWebSocketClient extends WebSocketClient {\r\n\r\n        private CountDownLatch handshakeSuccess;\r\n        private CountDownLatch connectClose;\r\n        public StringBuilder resultMsg = new StringBuilder();\r\n\r\n        public String getMsg() {\r\n            return resultMsg.toString();\r\n        }\r\n\r\n        public void setMsg(StringBuilder msg) {\r\n            this.resultMsg = msg;\r\n        }\r\n\r\n        public void update(Long id,CommonAsyncListener<Object> listener) {\r\n            Map<String, Object> keyMap = new HashMap();\r\n            keyMap.put(\"id\", id);\r\n            //连接出错，更新账号有效性\r\n            XHttp.get(\"smart-server/kdxfkey/updateKey\").baseUrl(ConstantsUtil.SERVER_ADDRESS).params(keyMap)\r\n                    .keepJson(true).execute(new SimpleCallBack<String>() {\r\n                @Override\r\n                public void onSuccess(String response) throws URISyntaxException {\r\n                    listener.doSomething(new Object());\r\n                }\r\n\r\n                @Override\r\n                public void onError(ApiException e) {\r\n                    Log.e(\"\", \"调用科大讯飞账号信息异常!\");\r\n                }\r\n            });\r\n        }\r\n\r\n        public MyWebSocketClient(URI serverUri, Draft protocolDraft, CountDownLatch handshakeSuccess, CountDownLatch connectClose) {\r\n            super(serverUri, protocolDraft);\r\n            this.handshakeSuccess = handshakeSuccess;\r\n            this.connectClose = connectClose;\r\n            if (serverUri.toString().contains(\"wss\")) {\r\n                trustAllHosts(this);\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onOpen(ServerHandshake handshake) {\r\n            System.out.println(getCurrentTimeStr() + \"\\t连接建立成功！\");\r\n        }\r\n\r\n        @Override\r\n        public void onMessage(String msg) {\r\n            JSONObject msgObj = JSON.parseObject(msg);\r\n            String action = msgObj.getString(\"action\");\r\n            if (Objects.equals(\"started\", action)) {\r\n                // 握手成功\r\n                System.out.println(getCurrentTimeStr() + \"\\t握手成功！sid: \" + msgObj.getString(\"sid\"));\r\n                handshakeSuccess.countDown();\r\n            } else if (Objects.equals(\"result\", action)) {\r\n                if (listener != null) {\r\n                    final EditText attachView = listener.getAttachView();\r\n                    if (attachView != null) {\r\n                        attachView.post(new Runnable() {\r\n                            @Override\r\n                            public void run() {\r\n                                attachView.setText(attachView.getText().toString()\r\n                                        + getContent(msgObj.getString(\"data\")));\r\n                                attachView.setSelection(attachView.getText().toString().length());\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                // 转写结果\r\n            } else if (Objects.equals(\"error\", action)) {\r\n                String code = msgObj.getString(\"code\");\r\n                //发生异常，关闭错误的socket\r\n                RTASRUtils.instance().closeWebSocket();\r\n                if (\"10110\".equals(code)||\"10105\".equals(code)){\r\n                    //code：10110 没有有效的许可文件或到期no license|left time not enough\r\n                    if (keyInfoListener != null) {\r\n                        //更新无用账号；\r\n                        update(keyInfoListener.getKeyId(), new CommonAsyncListener<Object>() {\r\n                            @Override\r\n                            public void doSomething(Object data) {\r\n                                if (data!=null){\r\n                                    RTASRUtils.instance().createAsyncClient();\r\n                                }\r\n                            }\r\n                        });\r\n                    }\r\n                    try {\r\n                        Thread.sleep(500);\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }else{\r\n                    //10800超过最大连接数over max connect limit\r\n                    //10206  websocket read client error\r\n                    //10205 websocket read error|read data from engine error\r\n                    RTASRUtils.instance().createAsyncClient();\r\n                }\r\n            }\r\n        }\r\n\r\n        @Override\r\n        public void onError(Exception e) {\r\n            System.out.println(getCurrentTimeStr() + \"\\t连接发生错误：\" + e.getMessage() + \", \" + new Date());\r\n            e.printStackTrace();\r\n            //System.exit(0);\r\n        }\r\n\r\n        @Override\r\n        public void onClose(int arg0, String arg1, boolean arg2) {\r\n            System.out.println(getCurrentTimeStr() + \"\\t链接关闭\");\r\n            connectClose.countDown();\r\n            RTASRUtils.setAllowLooperInWebSocket(false);\r\n        }\r\n\r\n        @Override\r\n        public void onMessage(ByteBuffer bytes) {\r\n            try {\r\n                System.out.println(getCurrentTimeStr() + \"\\t服务端返回：\" + new String(bytes.array(), \"UTF-8\"));\r\n            } catch (UnsupportedEncodingException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n\r\n        public void trustAllHosts(MyWebSocketClient appClient) {\r\n            System.out.println(\"wss\");\r\n            TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\r\n                @Override\r\n                public X509Certificate[] getAcceptedIssuers() {\r\n                    return new X509Certificate[]{};\r\n                }\r\n\r\n                @Override\r\n                public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {\r\n                    // TODO Auto-generated method stub\r\n\r\n                }\r\n\r\n                @Override\r\n                public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {\r\n                    // TODO Auto-generated method stub\r\n\r\n                }\r\n            }};\r\n\r\n            try {\r\n                SSLContext sc = SSLContext.getInstance(\"TLS\");\r\n                sc.init(null, trustAllCerts, new java.security.SecureRandom());\r\n                appClient.setSocket(sc.getSocketFactory().createSocket());\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    // 把转写结果解析为句子\r\n    public static String getContent(String message) {\r\n        StringBuffer resultBuilder = new StringBuffer();\r\n        try {\r\n            JSONObject messageObj = JSON.parseObject(message);\r\n            JSONObject cn = messageObj.getJSONObject(\"cn\");\r\n            JSONObject st = cn.getJSONObject(\"st\");\r\n            JSONArray rtArr = st.getJSONArray(\"rt\");\r\n            String ed = st.getString(\"ed\");//ed\t句子在整段语音中的结束时间，单位毫秒(ms)\t中间结果的ed为0\r\n            if (\"0\".equals(ed)) {\r\n                return \"\";\r\n            }\r\n            for (int i = 0; i < rtArr.size(); i++) {\r\n                JSONObject rtArrObj = rtArr.getJSONObject(i);\r\n                JSONArray wsArr = rtArrObj.getJSONArray(\"ws\");\r\n                for (int j = 0; j < wsArr.size(); j++) {\r\n\r\n                    JSONObject wsArrObj = wsArr.getJSONObject(j);\r\n                    JSONArray cwArr = wsArrObj.getJSONArray(\"cw\");\r\n                    for (int k = 0; k < cwArr.size(); k++) {\r\n                        JSONObject cwArrObj = cwArr.getJSONObject(k);\r\n                        String wStr = cwArrObj.getString(\"w\");\r\n                        resultBuilder.append(wStr);\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            return message;\r\n        }\r\n\r\n        return resultBuilder.toString();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/mindsemanteme/kdxfsdk/RTASRUtils.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/mindsemanteme/kdxfsdk/RTASRUtils.java	(date 1615538057393)
@@ -6,13 +6,11 @@
 import com.alibaba.fastjson.JSON;
 import com.alibaba.fastjson.JSONArray;
 import com.alibaba.fastjson.JSONObject;
+import com.bytemiracle.base.framework.http.OkGoHttp;
+import com.bytemiracle.base.framework.http.OnReceiveResult;
 import com.bytemiracle.base.framework.listener.CommonAsyncListener;
-import com.bytemiracle.base.framework.utils.ConstantsUtil;
 import com.bytemiracle.project.mindsemanteme.bean.KdxfKey;
 import com.bytemiracle.project.mindsemanteme.kdxfsdk.util.EncryptUtil;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.callback.SimpleCallBack;
-import com.xuexiang.xhttp2.exception.ApiException;
 
 import org.apache.commons.lang3.StringUtils;
 import org.java_websocket.WebSocket.READYSTATE;
@@ -77,7 +75,7 @@
     private CommonAsyncListener<MyWebSocketClient> initFinishListener;
 
     private static ConnectionListener keyInfoListener; //连接账号监听
-    private static boolean allowLooperInWebSocket ;
+    private static boolean allowLooperInWebSocket;
 
     public void setListener(InitAttachViewListener listener, CommonAsyncListener<MyWebSocketClient> initFinishListener) {
         this.listener = listener;
@@ -92,7 +90,7 @@
         RTASRUtils.allowLooperInWebSocket = allowLooperInWebSocket;
     }
 
-    public interface ConnectionListener{
+    public interface ConnectionListener {
         Long getKeyId();
     }
 
@@ -135,31 +133,35 @@
     }
 
     public void getKeyInfo(CommonAsyncListener<KdxfKey> listener) {
-
-        XHttp.get("smart-server/kdxfkey/getValidKey").baseUrl(ConstantsUtil.SERVER_ADDRESS).keepJson(true).execute(new SimpleCallBack<String>() {
-            @Override
-            public void onSuccess(String response) throws URISyntaxException {
-                JSONObject responseJson = JSONObject.parseObject(response);
-                if (responseJson.getBoolean("flag") ) {
-                    String data = responseJson.getString("data");
-                    if (StringUtils.isNotEmpty(data)) {
-                        JSONObject result = JSONObject.parseObject(data);
-                        String appId = result.getString("appId");
-                        String apiKey = result.getString("apiKey");
-                        Long id = result.getLong("id");
-                        kdxfKey.setAPPID(appId);
-                        kdxfKey.setAPIKey(apiKey);
-                        kdxfKey.setId(id);
-                        listener.doSomething(kdxfKey);
-                    }
-                }
-            }
+        OkGoHttp.newGetRequest().asyncRequestApi("smart-server/kdxfkey/getValidKey",
+                new HashMap<>(), new OnReceiveResult() {
+                    @Override
+                    public void onSuccess(Object resultBean) {
+                    }
+
+                    @Override
+                    public void onJson(String json) {
+                        JSONObject responseJson = JSONObject.parseObject(json);
+                        if (responseJson.getBoolean("flag")) {
+                            String data = responseJson.getString("data");
+                            if (StringUtils.isNotEmpty(data)) {
+                                JSONObject result = JSONObject.parseObject(data);
+                                String appId = result.getString("appId");
+                                String apiKey = result.getString("apiKey");
+                                Long id = result.getLong("id");
+                                kdxfKey.setAPPID(appId);
+                                kdxfKey.setAPIKey(apiKey);
+                                kdxfKey.setId(id);
+                                listener.doSomething(kdxfKey);
+                            }
+                        }
+                    }
 
-            @Override
-            public void onError(ApiException e) {
-                Log.e("", "调用科大讯飞账号信息异常!");
-            }
-        });
+                    @Override
+                    public void onFailed(String reason) {
+                        Log.e("", "调用科大讯飞账号信息异常!");
+                    }
+                });
     }
 
 
@@ -275,22 +277,22 @@
             this.resultMsg = msg;
         }
 
-        public void update(Long id,CommonAsyncListener<Object> listener) {
+        public void update(Long id, CommonAsyncListener<Object> listener) {
             Map<String, Object> keyMap = new HashMap();
             keyMap.put("id", id);
             //连接出错，更新账号有效性
-            XHttp.get("smart-server/kdxfkey/updateKey").baseUrl(ConstantsUtil.SERVER_ADDRESS).params(keyMap)
-                    .keepJson(true).execute(new SimpleCallBack<String>() {
-                @Override
-                public void onSuccess(String response) throws URISyntaxException {
-                    listener.doSomething(new Object());
-                }
+            OkGoHttp.newGetRequest().asyncRequestApi("smart-server/kdxfkey/updateKey",
+                    keyMap, new OnReceiveResult() {
+                        @Override
+                        public void onSuccess(Object resultBean) {
+                            listener.doSomething(new Object());
+                        }
 
-                @Override
-                public void onError(ApiException e) {
-                    Log.e("", "调用科大讯飞账号信息异常!");
-                }
-            });
+                        @Override
+                        public void onFailed(String reason) {
+                            Log.e("", "调用科大讯飞账号信息异常!");
+                        }
+                    });
         }
 
         public MyWebSocketClient(URI serverUri, Draft protocolDraft, CountDownLatch handshakeSuccess, CountDownLatch connectClose) {
@@ -334,14 +336,14 @@
                 String code = msgObj.getString("code");
                 //发生异常，关闭错误的socket
                 RTASRUtils.instance().closeWebSocket();
-                if ("10110".equals(code)||"10105".equals(code)){
+                if ("10110".equals(code) || "10105".equals(code)) {
                     //code：10110 没有有效的许可文件或到期no license|left time not enough
                     if (keyInfoListener != null) {
                         //更新无用账号；
                         update(keyInfoListener.getKeyId(), new CommonAsyncListener<Object>() {
                             @Override
                             public void doSomething(Object data) {
-                                if (data!=null){
+                                if (data != null) {
                                     RTASRUtils.instance().createAsyncClient();
                                 }
                             }
@@ -352,7 +354,7 @@
                     } catch (Exception e) {
                         e.printStackTrace();
                     }
-                }else{
+                } else {
                     //10800超过最大连接数over max connect limit
                     //10206  websocket read client error
                     //10205 websocket read error|read data from engine error
Index: app/src/main/res/layout/fragment_setting_feedback.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"match_parent\"\r\n    android:orientation=\"vertical\">\r\n\r\n    <FrameLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"match_parent\">\r\n\r\n        <ImageView style=\"@style/bg_setting_style\" />\r\n\r\n        <LinearLayout\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"match_parent\"\r\n            android:orientation=\"vertical\"\r\n            android:paddingLeft=\"@dimen/pad_content_horizontal_padding\"\r\n            android:paddingRight=\"@dimen/pad_content_horizontal_padding\"\r\n            android:paddingBottom=\"@dimen/pad_content_vertical_padding\">\r\n\r\n            <com.bytemiracle.base.framework.view.indicator.IndicatorTextView\r\n                android:id=\"@+id/indicator_1\"\r\n                style=\"@style/app_common_bold_2_black\"\r\n                android:layout_width=\"match_parent\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingTop=\"@dimen/dpx_8\"\r\n                android:paddingBottom=\"@dimen/dpx_5\"\r\n                android:text=\"@string/text_please_check_point_of_problem\" />\r\n\r\n            <GridView\r\n                android:id=\"@+id/grid_points_container\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:numColumns=\"2\"\r\n                android:paddingLeft=\"@dimen/dp_10\" />\r\n\r\n            <com.bytemiracle.base.framework.view.indicator.IndicatorTextView\r\n                android:id=\"@+id/indicator_2\"\r\n                style=\"@style/app_common_bold_2_black\"\r\n                android:layout_width=\"match_parent\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingTop=\"@dimen/dpx_8\"\r\n                android:paddingBottom=\"@dimen/dpx_5\"\r\n                android:text=\"@string/text_please_input_detail\" />\r\n\r\n            <EditText\r\n                android:id=\"@+id/et_problem_detail\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"@dimen/pad_input_multi_line_height\"\r\n                android:background=\"@drawable/bg_gray_roundrect_stroke\"\r\n                android:gravity=\"top\"\r\n                android:hint=\"请填写您要反馈的意见或问题\"\r\n                android:paddingLeft=\"@dimen/dp_10\"\r\n                android:paddingTop=\"@dimen/dp_3\"\r\n                android:paddingRight=\"@dimen/dp_10\"\r\n                android:paddingBottom=\"@dimen/dp_5\"\r\n                android:textSize=\"@dimen/text_size_app_common_content\" />\r\n\r\n            <com.bytemiracle.base.framework.view.indicator.IndicatorTextView\r\n                android:id=\"@+id/indicator_3\"\r\n                style=\"@style/app_common_bold_2_black\"\r\n                android:layout_width=\"match_parent\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingTop=\"@dimen/dpx_8\"\r\n                android:paddingBottom=\"@dimen/dpx_5\"\r\n                android:text=\"@string/please_commit_detail_picture\" />\r\n\r\n            <LinearLayout\r\n                android:id=\"@+id/ll_picture_container\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"@dimen/dpx_60\"\r\n                android:gravity=\"center_vertical\"\r\n                android:orientation=\"horizontal\">\r\n\r\n                <ImageView\r\n                    android:id=\"@+id/iv_add_picture\"\r\n                    android:layout_width=\"@dimen/dpx_60\"\r\n                    android:layout_height=\"match_parent\"\r\n                    android:src=\"@drawable/icon_add_problem_picture\" />\r\n            </LinearLayout>\r\n\r\n            <com.bytemiracle.base.framework.view.indicator.IndicatorTextView\r\n                android:id=\"@+id/indicator_4\"\r\n                style=\"@style/app_common_bold_2_black\"\r\n                android:layout_width=\"match_parent\"\r\n                android:gravity=\"center_vertical\"\r\n                android:paddingTop=\"@dimen/dpx_8\"\r\n                android:paddingBottom=\"@dimen/dpx_5\"\r\n                android:text=\"@string/text_contact_method\" />\r\n\r\n            <EditText\r\n                android:id=\"@+id/et_contact_method\"\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:background=\"@drawable/bg_gray_roundrect_stroke\"\r\n                android:hint=\"QQ/电话/邮箱/微信\"\r\n                android:maxLines=\"1\"\r\n                android:paddingLeft=\"@dimen/dp_10\"\r\n                android:paddingTop=\"@dimen/dp_3\"\r\n                android:paddingRight=\"@dimen/dp_10\"\r\n                android:paddingBottom=\"@dimen/dp_5\"\r\n                android:textSize=\"@dimen/text_size_app_common_content\" />\r\n\r\n            <LinearLayout\r\n                android:layout_width=\"match_parent\"\r\n                android:layout_height=\"wrap_content\"\r\n                android:layout_marginTop=\"@dimen/dp_20\"\r\n                android:gravity=\"center_horizontal\">\r\n\r\n                <com.xuexiang.xui.widget.button.roundbutton.RoundButton\r\n                    android:id=\"@+id/btn_commit\"\r\n                    style=\"@style/app_round_10_blue_button\"\r\n                    android:layout_width=\"wrap_content\"\r\n                    android:layout_height=\"@dimen/dp_40\"\r\n                    android:paddingLeft=\"@dimen/dp_30\"\r\n                    android:paddingRight=\"@dimen/dp_30\"\r\n                    android:text=\"@string/text_commit\" />\r\n            </LinearLayout>\r\n        </LinearLayout>\r\n    </FrameLayout>\r\n</LinearLayout>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/fragment_setting_feedback.xml	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/res/layout/fragment_setting_feedback.xml	(date 1615516236117)
@@ -107,13 +107,9 @@
                 android:layout_marginTop="@dimen/dp_20"
                 android:gravity="center_horizontal">
 
-                <com.xuexiang.xui.widget.button.roundbutton.RoundButton
+                <Button
                     android:id="@+id/btn_commit"
-                    style="@style/app_round_10_blue_button"
-                    android:layout_width="wrap_content"
-                    android:layout_height="@dimen/dp_40"
-                    android:paddingLeft="@dimen/dp_30"
-                    android:paddingRight="@dimen/dp_30"
+                    style="@style/app_14sp_white_text_blue_small_button"
                     android:text="@string/text_commit" />
             </LinearLayout>
         </LinearLayout>
Index: smart-base/src/main/java/com/bytemiracle/base/framework/update/DownloadFileService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.base.framework.update;\r\n\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.Service;\r\nimport android.content.Intent;\r\nimport android.os.Binder;\r\nimport android.os.IBinder;\r\n\r\nimport androidx.annotation.Nullable;\r\nimport androidx.core.app.NotificationCompat;\r\n\r\nimport com.bytemiracle.base.framework.listener.CommonAsyncListener;\r\nimport com.bytemiracle.base.framework.utils.FileUtil;\r\nimport com.xuexiang.xhttp2.callback.DownloadProgressCallBack;\r\nimport com.xuexiang.xhttp2.exception.ApiException;\r\n\r\n/**\r\n * 类功能：下载文件服务\r\n *\r\n * @author gwwang\r\n * @date 2021/3/10 11:32\r\n */\r\npublic class DownloadFileService extends Service {\r\n    private static final String TAG = \"DownloadFileService\";\r\n    private static final int DOWNLOAD_NOTIFY_ID = 1000;\r\n    private static final String CHANNEL_ID = \"channel_id\";\r\n    private static final CharSequence CHANNEL_NAME = \"channel_name\";\r\n\r\n    private DownloadFileBinder downloadFileBinder = new DownloadFileBinder();\r\n\r\n\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n        UpdateComponent.setUpdateRunning(true);\r\n        initNotification();\r\n    }\r\n\r\n    /**\r\n     * 初始化通知\r\n     */\r\n    private void initNotification() {\r\n        NotificationManager notificationManager = (NotificationManager) getSystemService(android.content.Context.NOTIFICATION_SERVICE);\r\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r\n            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH);\r\n            channel.enableVibration(false);\r\n            channel.enableLights(false);\r\n            notificationManager.createNotificationChannel(channel);\r\n        }\r\n        NotificationCompat.Builder mBuilder = getNotificationBuilder();\r\n        notificationManager.notify(DOWNLOAD_NOTIFY_ID, mBuilder.build());\r\n    }\r\n\r\n    private NotificationCompat.Builder getNotificationBuilder() {\r\n        return new NotificationCompat.Builder(this, CHANNEL_ID)\r\n                .setContentTitle(\"正在更新\")\r\n                .setSmallIcon(UpdateComponent.appLogo)\r\n                .setOngoing(true)\r\n                .setAutoCancel(true)\r\n                .setWhen(System.currentTimeMillis());\r\n    }\r\n\r\n    /**\r\n     * 更新监听代理对象\r\n     */\r\n    public class DownloadFileBinder extends Binder {\r\n        public void startDownload(String downloadUrl, CommonAsyncListener<Float> downLoadListener) {\r\n            DownLoadManager.getInstance().downLoadFile(downloadUrl,\r\n                    //给正在下载的文件添加temp后缀\r\n                    FileUtil.appendTempFlag(FileUtil.getFileDisplayName(downloadUrl)),\r\n                    new DownloadProgressCallBack<String>() {\r\n                        @Override\r\n                        public void onStart() {\r\n                        }\r\n\r\n                        @Override\r\n                        public void onError(ApiException e) {\r\n                        }\r\n\r\n                        @Override\r\n                        public void update(long downLoadSize, long totalSize, boolean done) {\r\n                            float percent = downLoadSize * 1f / totalSize;\r\n                            downLoadListener.doSomething(percent);\r\n                        }\r\n\r\n                        @Override\r\n                        public void onComplete(String path) {\r\n                            //给下载完成的文件移除temp后缀\r\n                            FileUtil.removeTempFlag(path);\r\n                            downLoadListener.doSomething(1f);\r\n                        }\r\n                    });\r\n        }\r\n    }\r\n\r\n    @Nullable\r\n    @Override\r\n    public IBinder onBind(Intent intent) {\r\n        return downloadFileBinder;\r\n    }\r\n\r\n    @Override\r\n    public boolean onUnbind(Intent intent) {\r\n        UpdateComponent.setUpdateRunning(false);\r\n        return super.onUnbind(intent);\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        UpdateComponent.setUpdateRunning(false);\r\n        super.onDestroy();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/update/DownloadFileService.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/update/DownloadFileService.java	(date 1615782878426)
@@ -10,10 +10,8 @@
 import androidx.annotation.Nullable;
 import androidx.core.app.NotificationCompat;
 
-import com.bytemiracle.base.framework.listener.CommonAsyncListener;
-import com.bytemiracle.base.framework.utils.FileUtil;
-import com.xuexiang.xhttp2.callback.DownloadProgressCallBack;
-import com.xuexiang.xhttp2.exception.ApiException;
+import com.bytemiracle.base.framework.http.OkGoHttp;
+import com.bytemiracle.base.framework.http.SmartDownloadRequest;
 
 /**
  * 类功能：下载文件服务
@@ -65,32 +63,8 @@
      * 更新监听代理对象
      */
     public class DownloadFileBinder extends Binder {
-        public void startDownload(String downloadUrl, CommonAsyncListener<Float> downLoadListener) {
-            DownLoadManager.getInstance().downLoadFile(downloadUrl,
-                    //给正在下载的文件添加temp后缀
-                    FileUtil.appendTempFlag(FileUtil.getFileDisplayName(downloadUrl)),
-                    new DownloadProgressCallBack<String>() {
-                        @Override
-                        public void onStart() {
-                        }
-
-                        @Override
-                        public void onError(ApiException e) {
-                        }
-
-                        @Override
-                        public void update(long downLoadSize, long totalSize, boolean done) {
-                            float percent = downLoadSize * 1f / totalSize;
-                            downLoadListener.doSomething(percent);
-                        }
-
-                        @Override
-                        public void onComplete(String path) {
-                            //给下载完成的文件移除temp后缀
-                            FileUtil.removeTempFlag(path);
-                            downLoadListener.doSomething(1f);
-                        }
-                    });
+        public void startDownload(String downloadUrl, String destFileDir, String destFileName, SmartDownloadRequest.OnDownloadChangeListener downLoadListener) {
+            OkGoHttp.newDownloadRequest().asyncDownloadRequest(downloadUrl, destFileDir, destFileName, downLoadListener);
         }
     }
 
Index: smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartUploadRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartUploadRequest.java	(date 1615539355838)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartUploadRequest.java	(date 1615539355838)
@@ -0,0 +1,81 @@
+package com.bytemiracle.base.framework.http;
+
+import com.bytemiracle.base.framework.listener.CommonAsync2Listener;
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.callback.StringCallback;
+import com.lzy.okgo.model.Response;
+
+import java.io.File;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 类功能：基于okGo封装的上传请求
+ *
+ * @author gwwang
+ * @date 2021/3/12 10:14
+ */
+public class SmartUploadRequest extends OkGoHttp {
+    private static final String TAG = "SmartUploadRequest";
+    private static final SmartUploadRequest instance = new SmartUploadRequest();
+
+    public static SmartUploadRequest get() {
+        return instance;
+    }
+
+    /**
+     * 创建get请求
+     *
+     * @param methodName     文件的服务器路径
+     * @param params         请求参数
+     *                       * @param multiFilesKey  上传文件的key
+     * @param uploadFiles    上传的文件
+     * @param uploadListener 上传回调
+     * @return
+     */
+    public Object asyncUploadRequest(String methodName,
+                                     Map<String, Object> params,
+                                     String multiFilesKey,
+                                     List<File> uploadFiles,
+                                     CommonAsync2Listener uploadListener) {
+        return asyncUploadRequest(methodName, new HashMap<>(), params, multiFilesKey, uploadFiles, uploadListener);
+    }
+
+    /**
+     * 创建get请求
+     *
+     * @param methodName     文件的服务器路径
+     * @param headers        请求头
+     * @param params         请求参数
+     * @param multiFilesKey  上传文件的key
+     * @param uploadFiles    上传的文件
+     * @param uploadListener 上传回调
+     * @return
+     */
+    protected Object asyncUploadRequest(String methodName,
+                                        Map<String, Object> headers,
+                                        Map<String, Object> params,
+                                        String multiFilesKey,
+                                        List<File> uploadFiles,
+                                        CommonAsync2Listener uploadListener) {
+        Object requestTag = generateRequestTag(methodName);
+        OkGo.<String>post(BASE_API_URL + methodName)
+                .tag(requestTag)//
+                .headers(buildHttpHeaders(headers))
+                .params(buildHttpParams(params))
+                .addFileParams(multiFilesKey, uploadFiles)           // 这种方式为同一个key，上传多个文件
+                .execute(new StringCallback() {
+                    @Override
+                    public void onSuccess(Response<String> response) {
+                        uploadListener.doSomething1("上传成功");
+                    }
+
+                    @Override
+                    public void onError(Response<String> response) {
+                        uploadListener.doSomething2("上传失败");
+                    }
+                });
+        return requestTag;
+    }
+}
Index: app/src/main/java/com/bytemiracle/project/login/Register.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.project.login;\r\n\r\nimport android.os.Build;\r\nimport android.util.Log;\r\n\r\nimport androidx.annotation.RequiresApi;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.bytemiracle.base.framework.utils.ConstantsUtil;\r\nimport com.bytemiracle.base.framework.utils.EasySharedPreference;\r\nimport com.bytemiracle.base.framework.utils.FileUtil;\r\nimport com.bytemiracle.base.framework.utils.UniqueIdUtil;\r\nimport com.bytemiracle.project.common.FileLocalUtils;\r\nimport com.bytemiracle.project.contacts.bean.TimelyCommunicationDto;\r\nimport com.xuexiang.xhttp2.XHttp;\r\nimport com.xuexiang.xhttp2.callback.SimpleCallBack;\r\nimport com.xuexiang.xhttp2.exception.ApiException;\r\nimport com.xuexiang.xutil.XUtil;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileReader;\r\nimport java.io.FileWriter;\r\nimport java.util.Base64;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport cn.wildfirechat.remote.ChatManager;\r\n\r\nimport static com.xuexiang.xutil.XUtil.getContext;\r\n\r\npublic class Register {\r\n\r\n    private static String TAG = Register.class.getName();\r\n    private static String licenseFile = FileLocalUtils.licPath;\r\n\r\n    private boolean[] flagCompletes = {false, false};\r\n\r\n    /**\r\n     * 判断license文件是否存在\r\n     *\r\n     * @return\r\n     */\r\n    public static boolean checkHiveLicenseFile() {\r\n        return FileUtil.fileIsExists(licenseFile);\r\n    }\r\n\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.O)\r\n    public static void genLicense(String key) {\r\n        // 删除授权目录下的文件\r\n        /*File dir = new File(licenseFile);\r\n        for(File file: dir.listFiles()){\r\n            file.delete();\r\n        }*/\r\n        try {\r\n            File lic = new File(licenseFile);\r\n            //创建父级文件夹\r\n            FileUtil.checkDir(lic.getParent());\r\n            // 创建文件\r\n            lic.createNewFile();\r\n            //Base64 加密\r\n            String encoded = Base64.getEncoder().encodeToString(licenseKey(key).getBytes());\r\n            // creates a FileWriter Object\r\n            FileWriter fwriter = new FileWriter(lic, false);\r\n            // 向文件写入内容\r\n            fwriter.write(encoded);\r\n            fwriter.flush();\r\n            fwriter.close();\r\n        } catch (Exception e) {\r\n            Log.e(TAG, e.toString());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 删除无效的license\r\n     */\r\n    public static void delLic() {\r\n        File dir = new File(licenseFile);\r\n        for (File file : dir.listFiles()) {\r\n            file.delete();\r\n        }\r\n    }\r\n\r\n    public static boolean verify(String key) {\r\n        File file = new File(licenseFile);\r\n        if (file.exists()) {\r\n            try {\r\n                StringBuilder sb = new StringBuilder();\r\n\r\n                //构造一个BufferedReader类来读取文件\r\n                BufferedReader br = new BufferedReader(new FileReader(file));\r\n                String str = null;\r\n                //使用readLine方法，一次读一行\r\n                while ((str = br.readLine()) != null) {\r\n                    sb.append(str);\r\n                }\r\n                br.close();\r\n                //Base64 解密\r\n                byte[] decoded = new byte[0];\r\n                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\r\n                    decoded = Base64.getDecoder().decode(String.valueOf(sb));\r\n                }\r\n                if (licenseKey(key).equals(new String(decoded))) {\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            } catch (Exception e) {\r\n                Log.e(TAG, e.toString());\r\n                return false;\r\n            }\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private static String licenseKey(String key) {\r\n        // MAC 地址\r\n        String mac = UniqueIdUtil.getDeviceId(getContext());\r\n        return mac + \";\" + key;\r\n    }\r\n\r\n    public Register() {\r\n\r\n    }\r\n\r\n    public void login(Map<String, Object> loginParams) {\r\n        XHttp.post(\"smart-server/app/login\").baseUrl(ConstantsUtil.SERVER_ADDRESS)\r\n                .params(loginParams)\r\n                .keepJson(true)\r\n                .execute(new SimpleCallBack<String>() {\r\n                    @Override\r\n                    public void onSuccess(String response) throws Throwable {\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ApiException e) {\r\n\r\n                    }\r\n                });\r\n    }\r\n\r\n    //获取用户初始化信息\r\n    public void asyncGetUserInfo() {\r\n        HashMap<String, Object> initAddressBookParams = new HashMap() {\r\n            {\r\n                put(\"machineCode\", UniqueIdUtil.getDeviceId(XUtil.getContext()));\r\n                put(\"clientId\", ChatManager.Instance().getClientId());\r\n                put(\"platform\", 2);\r\n            }\r\n        };\r\n        XHttp.post(\"smart-server/app/addressBookInit\")\r\n                .baseUrl(ConstantsUtil.SERVER_ADDRESS)\r\n                .params(initAddressBookParams)\r\n                .keepJson(true)\r\n                .execute(new SimpleCallBack<String>() {\r\n                    @Override\r\n                    public void onSuccess(String response) {\r\n                        JSONObject responseJson = JSONObject.parseObject(response);\r\n                        if (responseJson.getInteger(\"code\") == 0) {\r\n                            String data = responseJson.getString(\"data\");\r\n                            if (StringUtils.isNotEmpty(data)) {\r\n                                TimelyCommunicationDto timelyCommunication = JSONObject.parseObject(data, TimelyCommunicationDto.class);\r\n                                if (timelyCommunication == null || StringUtils.isAnyEmpty(timelyCommunication.getId(), timelyCommunication.getToken())) {\r\n                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 1);\r\n                                } else {\r\n                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 0);\r\n                                    EasySharedPreference.get().putObject(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_INFO, timelyCommunication);\r\n                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_TOKEN, timelyCommunication.getToken());\r\n                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_ID, timelyCommunication.getId());\r\n                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_NICKNAME, timelyCommunication.getNickname());\r\n                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_MOBILE, timelyCommunication.getMobile());\r\n                                }\r\n                            }\r\n                        }\r\n                        if (responseJson.getInteger(\"code\") == 2) {\r\n                            //提示需要设备需要绑定用户\r\n                            EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 1);\r\n                        }\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(ApiException e) {\r\n                        Log.i(TAG, \"及时通讯初始化异常\");\r\n                    }\r\n                });\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/login/Register.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/login/Register.java	(date 1615778482249)
@@ -5,16 +5,14 @@
 
 import androidx.annotation.RequiresApi;
 
-import com.alibaba.fastjson.JSONObject;
+import com.bytemiracle.base.framework.http.OkGoHttp;
+import com.bytemiracle.base.framework.http.OnReceiveResult;
 import com.bytemiracle.base.framework.utils.ConstantsUtil;
 import com.bytemiracle.base.framework.utils.EasySharedPreference;
 import com.bytemiracle.base.framework.utils.FileUtil;
 import com.bytemiracle.base.framework.utils.UniqueIdUtil;
 import com.bytemiracle.project.common.FileLocalUtils;
-import com.bytemiracle.project.contacts.bean.TimelyCommunicationDto;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.callback.SimpleCallBack;
-import com.xuexiang.xhttp2.exception.ApiException;
+import com.bytemiracle.project.login.bean.AddressBookInitResponse;
 import com.xuexiang.xutil.XUtil;
 
 import org.apache.commons.lang3.StringUtils;
@@ -36,8 +34,6 @@
     private static String TAG = Register.class.getName();
     private static String licenseFile = FileLocalUtils.licPath;
 
-    private boolean[] flagCompletes = {false, false};
-
     /**
      * 判断license文件是否存在
      *
@@ -128,20 +124,21 @@
     }
 
     public void login(Map<String, Object> loginParams) {
-        XHttp.post("smart-server/app/login").baseUrl(ConstantsUtil.SERVER_ADDRESS)
-                .params(loginParams)
-                .keepJson(true)
-                .execute(new SimpleCallBack<String>() {
-                    @Override
-                    public void onSuccess(String response) throws Throwable {
+        OkGoHttp.newPostRequest().asyncRequestApi("smart-server/app/login", new HashMap<>(), new OnReceiveResult() {
+            @Override
+            public void onSuccess(Object resultBean) {
+            }
+
+            @Override
+            public void onJson(String json) {
 
-                    }
+            }
 
-                    @Override
-                    public void onError(ApiException e) {
+            @Override
+            public void onFailed(String reason) {
 
-                    }
-                });
+            }
+        });
     }
 
     //获取用户初始化信息
@@ -153,39 +150,32 @@
                 put("platform", 2);
             }
         };
-        XHttp.post("smart-server/app/addressBookInit")
-                .baseUrl(ConstantsUtil.SERVER_ADDRESS)
-                .params(initAddressBookParams)
-                .keepJson(true)
-                .execute(new SimpleCallBack<String>() {
+        OkGoHttp.newPostRequest().asyncRequestApiUseForm("smart-server/app/addressBookInit",
+                initAddressBookParams, new OnReceiveResult<AddressBookInitResponse>() {
                     @Override
-                    public void onSuccess(String response) {
-                        JSONObject responseJson = JSONObject.parseObject(response);
-                        if (responseJson.getInteger("code") == 0) {
-                            String data = responseJson.getString("data");
-                            if (StringUtils.isNotEmpty(data)) {
-                                TimelyCommunicationDto timelyCommunication = JSONObject.parseObject(data, TimelyCommunicationDto.class);
-                                if (timelyCommunication == null || StringUtils.isAnyEmpty(timelyCommunication.getId(), timelyCommunication.getToken())) {
-                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 1);
-                                } else {
-                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 0);
-                                    EasySharedPreference.get().putObject(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_INFO, timelyCommunication);
-                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_TOKEN, timelyCommunication.getToken());
-                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_ID, timelyCommunication.getId());
-                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_NICKNAME, timelyCommunication.getNickname());
-                                    EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_MOBILE, timelyCommunication.getMobile());
-                                }
-                            }
+                    public void onSuccess(AddressBookInitResponse resultBean) {
+                        if (resultBean.getCode() == 2) {
+                            //提示需要设备需要绑定用户
+                            EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 1);
+                            return;
+                        }
+                        //保存用户数据
+                        if (resultBean.getData() == null || StringUtils.isAnyEmpty(resultBean.getData().getId(), resultBean.getData().getToken())) {
+                            EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 1);
+                        } else {
+                            EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 0);
+                            EasySharedPreference.get().putObject(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_INFO, resultBean.getData());
+                            EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_TOKEN, resultBean.getData().getToken());
+                            EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_ID, resultBean.getData().getId());
+                            EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_NICKNAME, resultBean.getData().getNickname());
+                            EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_MOBILE, resultBean.getData().getMobile());
                         }
-                        if (responseJson.getInteger("code") == 2) {
-                            //提示需要设备需要绑定用户
-                            EasySharedPreference.get().put(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 1);
-                        }
+
                     }
 
                     @Override
-                    public void onError(ApiException e) {
-                        Log.i(TAG, "及时通讯初始化异常");
+                    public void onFailed(String reason) {
+                        Log.i(TAG, "即时通讯初始化异常");
                     }
                 });
     }
Index: app/src/main/java/com/bytemiracle/project/login/bean/AddressBookInitResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/login/bean/AddressBookInitResponse.java	(date 1615778562960)
+++ app/src/main/java/com/bytemiracle/project/login/bean/AddressBookInitResponse.java	(date 1615778562960)
@@ -0,0 +1,162 @@
+package com.bytemiracle.project.login.bean;
+
+import java.io.Serializable;
+
+/**
+ * 类功能：TODO:
+ *
+ * @author gwwang
+ * @date 2021/3/15 11:17
+ */
+public class AddressBookInitResponse {
+
+    /**
+     * data : {"id":"151","username":"王  文","nickname":"王文","headImgUrl":null,"mobile":"19988999988","sex":null,"email":null,"position":"局长","description":"","token":"SvIUlawOpXL0FdT704135Z5UCdZvY0FsudzJCUlWkIRcUrs8bdHiXW+Mn0qeytpJLRycluz3I0x7R1ycDTRJUnZZz4IAjvQ8B/euDvEksxmn6nZD9u9EfDYbxXc1sPJ2h0LREP8D9ElUxQg0sJSPp6E4yNBEbsbjfjYKiFhoAKmiQsPyHlGSt+2v2A6V45UXDoatg2iJyiMMC1RgPwKdqQ==","machineCode":"282b5c440c4e6ad44c46a264e9549073"}
+     * code : 0
+     * msg :
+     */
+
+    private DataDTO data;
+    private int code;
+    private String msg;
+
+    public DataDTO getData() {
+        return data;
+    }
+
+    public void setData(DataDTO data) {
+        this.data = data;
+    }
+
+    public int getCode() {
+        return code;
+    }
+
+    public void setCode(int code) {
+        this.code = code;
+    }
+
+    public String getMsg() {
+        return msg;
+    }
+
+    public void setMsg(String msg) {
+        this.msg = msg;
+    }
+
+    public static class DataDTO implements Serializable {
+        /**
+         * id : 151
+         * username : 王  文
+         * nickname : 王文
+         * headImgUrl : null
+         * mobile : 19988999988
+         * sex : null
+         * email : null
+         * position : 局长
+         * description :
+         * token : SvIUlawOpXL0FdT704135Z5UCdZvY0FsudzJCUlWkIRcUrs8bdHiXW+Mn0qeytpJLRycluz3I0x7R1ycDTRJUnZZz4IAjvQ8B/euDvEksxmn6nZD9u9EfDYbxXc1sPJ2h0LREP8D9ElUxQg0sJSPp6E4yNBEbsbjfjYKiFhoAKmiQsPyHlGSt+2v2A6V45UXDoatg2iJyiMMC1RgPwKdqQ==
+         * machineCode : 282b5c440c4e6ad44c46a264e9549073
+         */
+
+        private String id;
+        private String username;
+        private String nickname;
+        private String headImgUrl;
+        private String mobile;
+        private Object sex;
+        private String email;
+        private String position;
+        private String description;
+        private String token;
+        private String machineCode;
+
+        public String getId() {
+            return id;
+        }
+
+        public void setId(String id) {
+            this.id = id;
+        }
+
+        public String getUsername() {
+            return username;
+        }
+
+        public void setUsername(String username) {
+            this.username = username;
+        }
+
+        public String getNickname() {
+            return nickname;
+        }
+
+        public void setNickname(String nickname) {
+            this.nickname = nickname;
+        }
+
+        public String getHeadImgUrl() {
+            return headImgUrl;
+        }
+
+        public void setHeadImgUrl(String headImgUrl) {
+            this.headImgUrl = headImgUrl;
+        }
+
+        public String getMobile() {
+            return mobile;
+        }
+
+        public void setMobile(String mobile) {
+            this.mobile = mobile;
+        }
+
+        public Object getSex() {
+            return sex;
+        }
+
+        public void setSex(Object sex) {
+            this.sex = sex;
+        }
+
+        public String getEmail() {
+            return email;
+        }
+
+        public void setEmail(String email) {
+            this.email = email;
+        }
+
+        public String getPosition() {
+            return position;
+        }
+
+        public void setPosition(String position) {
+            this.position = position;
+        }
+
+        public String getDescription() {
+            return description;
+        }
+
+        public void setDescription(String description) {
+            this.description = description;
+        }
+
+        public String getToken() {
+            return token;
+        }
+
+        public void setToken(String token) {
+            this.token = token;
+        }
+
+        public String getMachineCode() {
+            return machineCode;
+        }
+
+        public void setMachineCode(String machineCode) {
+            this.machineCode = machineCode;
+        }
+    }
+}
Index: app/src/main/java/com/bytemiracle/project/common/sdkinit/XBasicLibInit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.project.common.sdkinit;\r\n\r\nimport android.app.Application;\r\n\r\nimport com.bytemiracle.base.framework.utils.ConstantsUtil;\r\nimport com.xuexiang.xhttp2.XHttp;\r\nimport com.xuexiang.xhttp2.XHttpSDK;\r\nimport com.xuexiang.xui.XUI;\r\nimport com.xuexiang.xutil.XUtil;\r\n\r\n/**\r\n * X系列基础库初始化\r\n *\r\n * @author xuexiang\r\n * @since 2019-06-30 23:54\r\n */\r\npublic final class XBasicLibInit {\r\n\r\n    private XBasicLibInit() {\r\n        throw new UnsupportedOperationException(\"u can't instantiate me...\");\r\n    }\r\n\r\n    /**\r\n     * 初始化基础库SDK\r\n     */\r\n    public static void init(Application application) {\r\n        //工具类\r\n        initXUtil(application);\r\n\r\n        //网络请求框架\r\n        initXHttp2(application);\r\n\r\n        //UI框架\r\n        initXUI(application);\r\n    }\r\n\r\n    /**\r\n     * 初始化XUtil工具类\r\n     */\r\n    private static void initXUtil(Application application) {\r\n        XUtil.init(application);\r\n        XUtil.debug(false);\r\n    }\r\n\r\n    /**\r\n     * 初始化XHttp2\r\n     */\r\n    private static void initXHttp2(Application application) {\r\n        //初始化网络请求框架，必须首先执行\r\n        XHttpSDK.init(application);\r\n        //设置网络请求的全局基础地址\r\n//        XHttpSDK.setBaseUrl(ConstantsUtil.SERVER_ADDRESS);\r\n        XHttp.getInstance().setBaseUrl(ConstantsUtil.SERVER_ADDRESS);\r\n//        //设置动态参数添加拦截器\r\n//        XHttpSDK.addInterceptor(new CustomDynamicInterceptor());\r\n//        //请求失效校验拦截器\r\n//        XHttpSDK.addInterceptor(new CustomExpiredInterceptor());\r\n    }\r\n\r\n    /**\r\n     * 初始化XUI框架\r\n     */\r\n    private static void initXUI(Application application) {\r\n        XUI.init(application);\r\n        XUI.debug(true);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/common/sdkinit/XBasicLibInit.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/common/sdkinit/XBasicLibInit.java	(date 1615537609976)
@@ -2,9 +2,6 @@
 
 import android.app.Application;
 
-import com.bytemiracle.base.framework.utils.ConstantsUtil;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.XHttpSDK;
 import com.xuexiang.xui.XUI;
 import com.xuexiang.xutil.XUtil;
 
@@ -27,9 +24,6 @@
         //工具类
         initXUtil(application);
 
-        //网络请求框架
-        initXHttp2(application);
-
         //UI框架
         initXUI(application);
     }
@@ -42,21 +36,6 @@
         XUtil.debug(false);
     }
 
-    /**
-     * 初始化XHttp2
-     */
-    private static void initXHttp2(Application application) {
-        //初始化网络请求框架，必须首先执行
-        XHttpSDK.init(application);
-        //设置网络请求的全局基础地址
-//        XHttpSDK.setBaseUrl(ConstantsUtil.SERVER_ADDRESS);
-        XHttp.getInstance().setBaseUrl(ConstantsUtil.SERVER_ADDRESS);
-//        //设置动态参数添加拦截器
-//        XHttpSDK.addInterceptor(new CustomDynamicInterceptor());
-//        //请求失效校验拦截器
-//        XHttpSDK.addInterceptor(new CustomExpiredInterceptor());
-    }
-
     /**
      * 初始化XUI框架
      */
Index: app/src/main/java/com/bytemiracle/project/contacts/PersonDetailFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.project.contacts;\r\n\r\nimport android.os.Bundle;\r\nimport android.text.TextUtils;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.TextView;\r\n\r\nimport com.bytemiracle.base.framework.fragment.BaseFragment;\r\nimport com.bytemiracle.base.framework.fragment.FragmentTag;\r\nimport com.bytemiracle.base.framework.utils.ConstantsUtil;\r\nimport com.bytemiracle.base.framework.utils.EasySharedPreference;\r\nimport com.bytemiracle.base.framework.utils.XToastUtils;\r\nimport com.bytemiracle.project.R;\r\nimport com.bytemiracle.project.common.im.dao.RecentConversation;\r\nimport com.bytemiracle.project.contacts.bean.OrgUserEntity;\r\nimport com.bytemiracle.project.contacts.bean.TimelyCommunicationDto;\r\nimport com.bytemiracle.project.contacts.event.EventOpenConversation;\r\nimport com.xuexiang.xui.widget.button.roundbutton.RoundButton;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.greenrobot.eventbus.EventBus;\r\n\r\nimport java.lang.ref.WeakReference;\r\n\r\nimport butterknife.BindView;\r\nimport cn.wildfirechat.model.UserInfo;\r\nimport cn.wildfirechat.remote.ChatManager;\r\nimport cn.wildfirechat.remote.GetUserInfoCallback;\r\n\r\n/**\r\n * 类功能：通讯录联系人详情\r\n *\r\n * @author gwwang\r\n * @date 2021/2/19 8:53\r\n */\r\n@FragmentTag(name = \"联系人详情\")\r\npublic class PersonDetailFragment extends BaseFragment {\r\n    private static final String TAG = \"PersonDetailFragment\";\r\n\r\n    public static final String KEY_DEPT_NAME = \"dept_name\";\r\n    public static final String KEY_ENTITY = \"entity\";\r\n\r\n    @BindView(R.id.tv_person_name_2)\r\n    TextView tvPersonName2;\r\n    @BindView(R.id.tv_person_phone_num)\r\n    TextView tvPersonPhoneNum;\r\n    @BindView(R.id.tv_person_dept)\r\n    TextView tvPersonDept;\r\n    @BindView(R.id.tv_person_duty)\r\n    TextView tvPersonDuty;\r\n    @BindView(R.id.tv_person_num)\r\n    TextView tvPersonNum;\r\n    @BindView(R.id.et_person_intro)\r\n    EditText etPersonIntro;\r\n    @BindView(R.id.btn_send_message)\r\n    RoundButton btnSendMessage;\r\n    @BindView(R.id.btn_back_pre)\r\n    ImageButton btnBackPre;\r\n\r\n    @Override\r\n    protected int getLayoutId() {\r\n        return R.layout.fragment_person_detail;\r\n    }\r\n\r\n    @Override\r\n    protected void initViews() {\r\n        if (null != getArguments()) {\r\n            Bundle arguments = getArguments();\r\n            String deptName = arguments.getString(KEY_DEPT_NAME);\r\n            OrgUserEntity orgUserEntity = (OrgUserEntity) arguments.getSerializable(KEY_ENTITY);\r\n            displayUserInfo(deptName, orgUserEntity);\r\n        }\r\n        btnBackPre.setOnClickListener(v -> {\r\n            if (getParentFragment() instanceof ContactsFragment) {\r\n                ContactsFragment f = (ContactsFragment) getParentFragment();\r\n                f.popPersonDetailFragment();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 点击人员节点，显示人员信息\r\n     *\r\n     * @param orgUserEntity\r\n     */\r\n    private void displayUserInfo(String deptName, OrgUserEntity orgUserEntity) {\r\n        tvPersonName2.setText(orgUserEntity.getName());\r\n        tvPersonPhoneNum.setText(orgUserEntity.getMobile());\r\n        tvPersonDept.setText(deptName);\r\n        tvPersonDuty.setText(orgUserEntity.getPosition());\r\n        tvPersonNum.setText(orgUserEntity.getWorkNum());\r\n        etPersonIntro.setText(TextUtils.isEmpty(orgUserEntity.getDescription()) ? \"\" : \"        \" + orgUserEntity.getDescription());\r\n\r\n        //点击发送消息按钮\r\n        btnSendMessage.setOnClickListener(v -> {\r\n            /*\r\n             * 当用户点击发送消息时\r\n             * 1.首先判断用户是否注册，其中如果显示设备未绑定用户，则需提示用户先绑定设备\r\n             * 2.判断用户选择的人员是否是用户自己\r\n             *     2.1 如果是用户自己，则发消息给admin用户，创建会话，用户与admin聊天\r\n             *     2.2 如果不是用户自己，则需判断对方用户是否注册\r\n             *          如果没有，则需提示联系管理员注册对方用户\r\n             *          如果注册, 则直接发送消息，创建会话，用户单聊\r\n             */\r\n            if (EasySharedPreference.get().contains(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS)) {\r\n                int thisMachineBindUserStatus = EasySharedPreference.get().getInt(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 1);\r\n                if (thisMachineBindUserStatus == 0) {\r\n                    TimelyCommunicationDto timelyCommunication = EasySharedPreference.get().getObject(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_INFO, TimelyCommunicationDto.class);\r\n                    if (timelyCommunication != null && StringUtils.isNotEmpty(timelyCommunication.getToken())) {\r\n                        //比较当前用户是否和发送方相同\r\n                        createConversation(orgUserEntity);\r\n                    }\r\n                } else {\r\n                    XToastUtils.error(\"本设备没有关联用户，请联系管理员处理\");\r\n                }\r\n            } else {\r\n                XToastUtils.error(\"首次访问通讯录需要联网\");\r\n            }\r\n        });\r\n    }\r\n\r\n    private void createConversation(OrgUserEntity orgUserEntity) {\r\n        //去判断当前这个用户是否在im server中注册过\r\n        ChatManager.Instance().getUserInfo(String.valueOf(orgUserEntity.getId()), true, new GetUserInfoCallback() {\r\n            @Override\r\n            public void onSuccess(UserInfo userInfo) {\r\n                RecentConversation recentConversation = new RecentConversation();\r\n                recentConversation.setUserType(RecentConversation.TYPE_SINGLE);\r\n                recentConversation.setUserId(String.valueOf(orgUserEntity.getId()));\r\n                recentConversation.setUserName(orgUserEntity.getName());\r\n                new WeakReference<>(PersonDetailFragment.this).get().sendConversationEvent(recentConversation);\r\n            }\r\n\r\n            @Override\r\n            public void onFail(int errorCode) {\r\n                XToastUtils.info(\"请联系管理员,启用成员\\\"\" + orgUserEntity.getName() + \"\\\"的聊天功能\");\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * 打开会话界面\r\n     *\r\n     * @param recentConversation\r\n     */\r\n    private void sendConversationEvent(RecentConversation recentConversation) {\r\n        EventOpenConversation event = new EventOpenConversation(recentConversation);\r\n        EventBus.getDefault().post(event);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/contacts/PersonDetailFragment.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/contacts/PersonDetailFragment.java	(date 1615778544505)
@@ -14,8 +14,8 @@
 import com.bytemiracle.project.R;
 import com.bytemiracle.project.common.im.dao.RecentConversation;
 import com.bytemiracle.project.contacts.bean.OrgUserEntity;
-import com.bytemiracle.project.contacts.bean.TimelyCommunicationDto;
 import com.bytemiracle.project.contacts.event.EventOpenConversation;
+import com.bytemiracle.project.login.bean.AddressBookInitResponse;
 import com.xuexiang.xui.widget.button.roundbutton.RoundButton;
 
 import org.apache.commons.lang3.StringUtils;
@@ -106,8 +106,8 @@
             if (EasySharedPreference.get().contains(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS)) {
                 int thisMachineBindUserStatus = EasySharedPreference.get().getInt(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_STATUS, 1);
                 if (thisMachineBindUserStatus == 0) {
-                    TimelyCommunicationDto timelyCommunication = EasySharedPreference.get().getObject(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_INFO, TimelyCommunicationDto.class);
-                    if (timelyCommunication != null && StringUtils.isNotEmpty(timelyCommunication.getToken())) {
+                    AddressBookInitResponse.DataDTO userInfo = EasySharedPreference.get().getObject(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_INFO, AddressBookInitResponse.DataDTO.class);
+                    if (userInfo != null && StringUtils.isNotEmpty(userInfo.getToken())) {
                         //比较当前用户是否和发送方相同
                         createConversation(orgUserEntity);
                     }
Index: smart-base/src/main/java/com/bytemiracle/base/framework/update/UpdateDialogController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.base.framework.update;\r\n\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.TextView;\r\n\r\nimport com.bytemiracle.base.R;\r\nimport com.bytemiracle.base.framework.component.BaseActivity;\r\nimport com.bytemiracle.base.framework.utils.FileUtil;\r\nimport com.bytemiracle.base.framework.utils.XToastUtils;\r\nimport com.xuexiang.xui.widget.dialog.materialdialog.MaterialDialog;\r\nimport com.xuexiang.xupdate.widget.NumberProgressBar;\r\n\r\nimport java.lang.ref.WeakReference;\r\n\r\n/**\r\n * 类功能：TODO:\r\n *\r\n * @author gwwang\r\n * @date 2021/3/10 11:32\r\n */\r\npublic class UpdateDialogController {\r\n    private static final int DIALOG_MAX_PROGRESS = 100;\r\n\r\n    private MaterialDialog dialog;\r\n    private Button btnUpdate;\r\n    private Button btnBackgroundUpdate;\r\n    private NumberProgressBar numberProgressBar;\r\n    private WeakReference<BaseActivity> activity;\r\n\r\n    public UpdateDialogController(BaseActivity activity) {\r\n        this.activity = new WeakReference<>(activity);\r\n    }\r\n\r\n    /**\r\n     * 创建dialog\r\n     *\r\n     * @param updateResponse\r\n     * @return\r\n     */\r\n    public MaterialDialog createDialog(UpdateResponse updateResponse) {\r\n        dialog = new MaterialDialog.Builder(activity.get())\r\n                .customView(R.layout.dialog_update_version, true)\r\n                .cancelable(false)\r\n                .build();\r\n        initViews(dialog, updateResponse);\r\n        return dialog;\r\n    }\r\n\r\n    /**\r\n     * 显示dialog\r\n     */\r\n    public void show() {\r\n        if (dialog != null) {\r\n            dialog.show();\r\n        }\r\n    }\r\n\r\n    private void initViews(MaterialDialog dialog, UpdateResponse updateResponse) {\r\n        TextView tvVersionDeclare = dialog.findViewById(R.id.tv_version_declare);\r\n        TextView tvVersionName = dialog.findViewById(R.id.tv_version_name);\r\n        TextView tvVersionSize = dialog.findViewById(R.id.tv_version_size);\r\n        btnUpdate = dialog.findViewById(R.id.btn_update);\r\n        btnBackgroundUpdate = dialog.findViewById(R.id.btn_background_update);\r\n        numberProgressBar = dialog.findViewById(R.id.number_progress_bar);\r\n\r\n        //初始，仅显示更新按钮\r\n        btnUpdate.setVisibility(View.VISIBLE);\r\n        numberProgressBar.setVisibility(View.GONE);\r\n        btnBackgroundUpdate.setVisibility(View.GONE);\r\n\r\n        btnUpdate.setOnClickListener(v -> {\r\n            numberProgressBar.setVisibility(View.VISIBLE);\r\n            btnBackgroundUpdate.setVisibility(View.VISIBLE);\r\n            btnUpdate.setVisibility(View.GONE);\r\n            //启动下载\r\n            prepareDownload(updateResponse);\r\n        });\r\n        btnBackgroundUpdate.setOnClickListener(v -> {\r\n            //因下载已在服务中，此处仅隐藏弹窗\r\n            dialog.dismiss();\r\n        });\r\n        //设置数据\r\n        tvVersionName.setText(updateResponse.getData().getVersionName());\r\n        tvVersionSize.setText(Double.parseDouble(updateResponse.getData().getApkSize()) * .001f + \"M\");\r\n        tvVersionDeclare.setText(updateResponse.getData().getModifyContent());\r\n    }\r\n\r\n    private void prepareDownload(UpdateResponse updateResponse) {\r\n        String apkServerUrl = updateResponse.getData().getDownloadUrl();\r\n        String apkName = FileUtil.getFileDisplayName(apkServerUrl);\r\n        if (DownLoadManager.getInstance().isExist(apkName)) {\r\n            //文件已经存在,安装即可\r\n            XToastUtils.info(\"可安装包已存在\");\r\n            numberProgressBar.setVisibility(View.GONE);\r\n            btnBackgroundUpdate.setText(\"安装\");\r\n            btnBackgroundUpdate.setOnClickListener(v -> {\r\n                DownLoadManager.getInstance().installApk(apkName);\r\n            });\r\n            return;\r\n        }\r\n        //文件不存在，启动后端服务下载\r\n        numberProgressBar.setMax(DIALOG_MAX_PROGRESS);\r\n        DownLoadManager.getInstance().downloadFileOnService(apkServerUrl, new DownLoadManager.OnProgressChangeListener() {\r\n            @Override\r\n            public void onChange(float progress) {\r\n                //更新进度条\r\n                if (dialog != null && dialog.isShowing()) {\r\n                    numberProgressBar.setProgress((int) (progress * DIALOG_MAX_PROGRESS));\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onSuccess() {\r\n                //下载完成\r\n                if (dialog != null && dialog.isShowing()) {\r\n                    numberProgressBar.setVisibility(View.GONE);\r\n                    btnBackgroundUpdate.setText(\"安装\");\r\n                    btnBackgroundUpdate.setOnClickListener(v -> {\r\n                        DownLoadManager.getInstance().installApk(apkName);\r\n                    });\r\n                } else {\r\n                    new UpdateDialogController(activity.get()).createDialog(updateResponse).show();\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onFailed() {\r\n                //下载失败\r\n                if (dialog != null && dialog.isShowing()) {\r\n                    btnUpdate.setVisibility(View.VISIBLE);\r\n                    numberProgressBar.setVisibility(View.GONE);\r\n                    btnBackgroundUpdate.setVisibility(View.GONE);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/update/UpdateDialogController.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/update/UpdateDialogController.java	(date 1615784830558)
@@ -6,11 +6,13 @@
 
 import com.bytemiracle.base.R;
 import com.bytemiracle.base.framework.component.BaseActivity;
+import com.bytemiracle.base.framework.http.SmartDownloadRequest;
 import com.bytemiracle.base.framework.utils.FileUtil;
 import com.bytemiracle.base.framework.utils.XToastUtils;
+import com.daimajia.numberprogressbar.NumberProgressBar;
 import com.xuexiang.xui.widget.dialog.materialdialog.MaterialDialog;
-import com.xuexiang.xupdate.widget.NumberProgressBar;
 
+import java.io.File;
 import java.lang.ref.WeakReference;
 
 /**
@@ -101,39 +103,41 @@
         }
         //文件不存在，启动后端服务下载
         numberProgressBar.setMax(DIALOG_MAX_PROGRESS);
-        DownLoadManager.getInstance().downloadFileOnService(apkServerUrl, new DownLoadManager.OnProgressChangeListener() {
-            @Override
-            public void onChange(float progress) {
-                //更新进度条
-                if (dialog != null && dialog.isShowing()) {
-                    numberProgressBar.setProgress((int) (progress * DIALOG_MAX_PROGRESS));
-                }
-            }
+        DownLoadManager.getInstance().downloadFileOnService(apkServerUrl,
+                UpdateComponent.DOWNLOAD_DIR,
+                new SmartDownloadRequest.OnDownloadChangeListener() {
+                    @Override
+                    public void onProgress(float fraction) {
+                        //更新进度条
+                        if (dialog != null && dialog.isShowing()) {
+                            numberProgressBar.setProgress((int) (fraction * DIALOG_MAX_PROGRESS));
+                        }
+                    }
 
-            @Override
-            public void onSuccess() {
-                //下载完成
-                if (dialog != null && dialog.isShowing()) {
-                    numberProgressBar.setVisibility(View.GONE);
-                    btnBackgroundUpdate.setText("安装");
-                    btnBackgroundUpdate.setOnClickListener(v -> {
-                        DownLoadManager.getInstance().installApk(apkName);
-                    });
-                } else {
-                    new UpdateDialogController(activity.get()).createDialog(updateResponse).show();
-                }
-            }
+                    @Override
+                    public void onSuccess(File file) {
+                        //下载完成
+                        if (dialog != null && dialog.isShowing()) {
+                            numberProgressBar.setVisibility(View.GONE);
+                            btnBackgroundUpdate.setText("安装");
+                            btnBackgroundUpdate.setOnClickListener(v -> {
+                                DownLoadManager.getInstance().installApk(apkName);
+                            });
+                        } else {
+                            new UpdateDialogController(activity.get()).createDialog(updateResponse).show();
+                        }
+                    }
 
-            @Override
-            public void onFailed() {
-                //下载失败
-                if (dialog != null && dialog.isShowing()) {
-                    btnUpdate.setVisibility(View.VISIBLE);
-                    numberProgressBar.setVisibility(View.GONE);
-                    btnBackgroundUpdate.setVisibility(View.GONE);
-                }
-            }
-        });
+                    @Override
+                    public void onFailed(String reason) {
+                        //下载失败
+                        if (dialog != null && dialog.isShowing()) {
+                            btnUpdate.setVisibility(View.VISIBLE);
+                            numberProgressBar.setVisibility(View.GONE);
+                            btnBackgroundUpdate.setVisibility(View.GONE);
+                        }
+                    }
+                });
 
     }
 }
Index: smart-base/src/main/java/com/bytemiracle/base/framework/update/DownLoadManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.base.framework.update;\r\n\r\nimport android.content.ComponentName;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.ServiceConnection;\r\nimport android.os.IBinder;\r\n\r\nimport com.bytemiracle.base.framework.GlobalInstanceHolder;\r\nimport com.bytemiracle.base.framework.utils.ApkInstallUtils;\r\nimport com.bytemiracle.base.framework.utils.FileUtil;\r\nimport com.bytemiracle.base.framework.utils.XToastUtils;\r\nimport com.xuexiang.xhttp2.XHttp;\r\nimport com.xuexiang.xhttp2.XHttpSDK;\r\nimport com.xuexiang.xhttp2.callback.DownloadProgressCallBack;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\n\r\n/**\r\n * 类功能：TODO:\r\n *\r\n * @author gwwang\r\n * @date 2021/3/11 11:05\r\n */\r\npublic class DownLoadManager {\r\n    private static final DownLoadManager instance = new DownLoadManager();\r\n\r\n    public interface OnProgressChangeListener {\r\n        void onChange(float progress);\r\n\r\n        void onSuccess();\r\n\r\n        void onFailed();\r\n    }\r\n\r\n    private DownLoadManager() {\r\n    }\r\n\r\n    /**\r\n     * DownLoadManager实例\r\n     *\r\n     * @return\r\n     */\r\n    public static DownLoadManager getInstance() {\r\n        return instance;\r\n    }\r\n\r\n    /**\r\n     * 在服务内下载文件\r\n     *\r\n     * @param fileServerUrl\r\n     * @param onProgressChangeListener\r\n     */\r\n    public void downloadFileOnService(String fileServerUrl, OnProgressChangeListener onProgressChangeListener) {\r\n        Intent intent = new Intent(GlobalInstanceHolder.applicationContext(), DownloadFileService.class);\r\n        GlobalInstanceHolder.applicationContext().bindService(intent, new ServiceConnection() {\r\n            @Override\r\n            public void onServiceConnected(ComponentName name, IBinder service) {\r\n                DownloadFileService.DownloadFileBinder binder = (DownloadFileService.DownloadFileBinder) service;\r\n                binder.startDownload(fileServerUrl, progress -> {\r\n                    if (progress != 1f) {\r\n                        onProgressChangeListener.onChange(progress);\r\n                    } else {\r\n                        //下载成功之后，回调并停止服务\r\n                        onProgressChangeListener.onSuccess();\r\n                        GlobalInstanceHolder.applicationContext().unbindService(this);\r\n                    }\r\n                });\r\n            }\r\n\r\n            @Override\r\n            public void onServiceDisconnected(ComponentName name) {\r\n                onProgressChangeListener.onFailed();\r\n                XToastUtils.info(\"下载失败!\");\r\n            }\r\n        }, Context.BIND_AUTO_CREATE);\r\n    }\r\n\r\n    /**\r\n     * 下载文件\r\n     *\r\n     * @param downloadUrl\r\n     * @param callback\r\n     */\r\n    public void downLoadFile(String downloadUrl, String fileName, DownloadProgressCallBack<String> callback) {\r\n        XHttpSDK.addRequest(downloadUrl, XHttp.downLoad(downloadUrl)\r\n                .savePath(UpdateComponent.DOWNLOAD_DIR)\r\n                .saveName(fileName)\r\n                .isUseBaseUrl(false)\r\n                .execute(callback));\r\n    }\r\n\r\n    /**\r\n     * apk是否存在\r\n     *\r\n     * @param apkName\r\n     * @return\r\n     */\r\n    public boolean isExist(String apkName) {\r\n        return FileUtil.fileIsExists(UpdateComponent.DOWNLOAD_DIR + File.separator + apkName);\r\n    }\r\n\r\n    /**\r\n     * 安装apk文件\r\n     *\r\n     * @param apkName\r\n     */\r\n    public void installApk(String apkName) {\r\n        try {\r\n            File apkFile = new File(UpdateComponent.DOWNLOAD_DIR + File.separator + apkName);\r\n            ApkInstallUtils.install(GlobalInstanceHolder.applicationContext(), apkFile);\r\n        } catch (IOException e) {\r\n            XToastUtils.info(\"获取apk的路径出错,安装失败!\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/update/DownLoadManager.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/update/DownLoadManager.java	(date 1615782673529)
@@ -7,12 +7,10 @@
 import android.os.IBinder;
 
 import com.bytemiracle.base.framework.GlobalInstanceHolder;
+import com.bytemiracle.base.framework.http.SmartDownloadRequest;
 import com.bytemiracle.base.framework.utils.ApkInstallUtils;
 import com.bytemiracle.base.framework.utils.FileUtil;
 import com.bytemiracle.base.framework.utils.XToastUtils;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.XHttpSDK;
-import com.xuexiang.xhttp2.callback.DownloadProgressCallBack;
 
 import java.io.File;
 import java.io.IOException;
@@ -26,13 +24,6 @@
 public class DownLoadManager {
     private static final DownLoadManager instance = new DownLoadManager();
 
-    public interface OnProgressChangeListener {
-        void onChange(float progress);
-
-        void onSuccess();
-
-        void onFailed();
-    }
 
     private DownLoadManager() {
     }
@@ -50,47 +41,47 @@
      * 在服务内下载文件
      *
      * @param fileServerUrl
-     * @param onProgressChangeListener
+     * @param destFileDir
+     * @param onDownloadChangeListener
      */
-    public void downloadFileOnService(String fileServerUrl, OnProgressChangeListener onProgressChangeListener) {
+    public void downloadFileOnService(String fileServerUrl, String destFileDir, SmartDownloadRequest.OnDownloadChangeListener onDownloadChangeListener) {
         Intent intent = new Intent(GlobalInstanceHolder.applicationContext(), DownloadFileService.class);
         GlobalInstanceHolder.applicationContext().bindService(intent, new ServiceConnection() {
             @Override
             public void onServiceConnected(ComponentName name, IBinder service) {
                 DownloadFileService.DownloadFileBinder binder = (DownloadFileService.DownloadFileBinder) service;
-                binder.startDownload(fileServerUrl, progress -> {
-                    if (progress != 1f) {
-                        onProgressChangeListener.onChange(progress);
-                    } else {
-                        //下载成功之后，回调并停止服务
-                        onProgressChangeListener.onSuccess();
-                        GlobalInstanceHolder.applicationContext().unbindService(this);
-                    }
-                });
+                binder.startDownload(fileServerUrl,
+                        destFileDir,
+                        //给正在下载的文件追加temp标记
+                        FileUtil.appendTempFlag(FileUtil.getFileDisplayName(fileServerUrl)),
+                        new SmartDownloadRequest.OnDownloadChangeListener() {
+                            @Override
+                            public void onProgress(float fraction) {
+                                onDownloadChangeListener.onProgress(fraction);
+                            }
+
+                            @Override
+                            public void onSuccess(File file) {
+                                //给下载完成的文件移除temp后缀
+                                FileUtil.removeTempFlag(file.getAbsolutePath());
+                                onDownloadChangeListener.onSuccess(file);
+                            }
+
+                            @Override
+                            public void onFailed(String reason) {
+                                onDownloadChangeListener.onFailed(reason);
+                            }
+                        });
             }
 
             @Override
             public void onServiceDisconnected(ComponentName name) {
-                onProgressChangeListener.onFailed();
-                XToastUtils.info("下载失败!");
+                onDownloadChangeListener.onFailed("下载断开");
+                XToastUtils.info("下载断开!");
             }
         }, Context.BIND_AUTO_CREATE);
     }
 
-    /**
-     * 下载文件
-     *
-     * @param downloadUrl
-     * @param callback
-     */
-    public void downLoadFile(String downloadUrl, String fileName, DownloadProgressCallBack<String> callback) {
-        XHttpSDK.addRequest(downloadUrl, XHttp.downLoad(downloadUrl)
-                .savePath(UpdateComponent.DOWNLOAD_DIR)
-                .saveName(fileName)
-                .isUseBaseUrl(false)
-                .execute(callback));
-    }
-
     /**
      * apk是否存在
      *
Index: smart-base/src/main/res/layout/dialog_update_version.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    android:layout_width=\"match_parent\"\r\n    android:layout_height=\"wrap_content\"\r\n    android:orientation=\"vertical\">\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\"\r\n        android:paddingTop=\"@dimen/dpx_10\">\r\n\r\n        <ImageView\r\n            android:layout_width=\"@dimen/dpx_20\"\r\n            android:layout_height=\"@dimen/dpx_20\"\r\n            android:src=\"@drawable/icon_version_update\" />\r\n\r\n        <TextView\r\n            style=\"@style/app_common_bold_2_black\"\r\n            android:layout_marginLeft=\"@dimen/dpx_5\"\r\n            android:text=\"检测到新版本\" />\r\n    </LinearLayout>\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:layout_marginTop=\"@dimen/dpx_10\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <TextView\r\n            style=\"@style/common_app_content_text\"\r\n            android:text=\"版本号:\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/tv_version_name\"\r\n            style=\"@style/common_app_content_text\"\r\n            android:layout_marginLeft=\"@dimen/dpx_5\"\r\n            android:text=\"V1.1.3.201126\" />\r\n    </LinearLayout>\r\n\r\n    <LinearLayout\r\n        android:layout_width=\"wrap_content\"\r\n        android:layout_height=\"wrap_content\"\r\n        android:orientation=\"horizontal\">\r\n\r\n        <TextView\r\n            style=\"@style/common_app_content_text\"\r\n            android:text=\"包大小:\" />\r\n\r\n        <TextView\r\n            android:id=\"@+id/tv_version_size\"\r\n            style=\"@style/common_app_content_text\"\r\n            android:layout_marginLeft=\"@dimen/dpx_5\"\r\n            android:text=\"150M\" />\r\n    </LinearLayout>\r\n\r\n    <TextView\r\n        android:id=\"@+id/tv_version_declare\"\r\n        style=\"@style/common_app_content_text\"\r\n        android:lineSpacingMultiplier=\"1.1\"\r\n        android:minHeight=\"@dimen/dpx_80\" />\r\n\r\n    <RelativeLayout\r\n        android:layout_width=\"match_parent\"\r\n        android:layout_height=\"wrap_content\">\r\n\r\n        <Button\r\n            android:id=\"@+id/btn_update\"\r\n            style=\"@style/app_14sp_white_text_blue_small_button\"\r\n            android:layout_centerInParent=\"true\"\r\n            android:text=\"升级\" />\r\n\r\n        <com.xuexiang.xupdate.widget.NumberProgressBar\r\n            android:id=\"@+id/number_progress_bar\"\r\n            style=\"@style/NumberProgressBar_Relax_Blue\"\r\n            android:layout_width=\"match_parent\"\r\n            android:layout_height=\"@dimen/dpx_30\"\r\n            android:layout_centerHorizontal=\"true\" />\r\n\r\n        <Button\r\n            android:id=\"@+id/btn_background_update\"\r\n            style=\"@style/app_14sp_white_text_blue_small_button\"\r\n            android:layout_below=\"@id/number_progress_bar\"\r\n            android:layout_centerInParent=\"true\"\r\n            android:layout_centerHorizontal=\"true\"\r\n            android:layout_marginTop=\"@dimen/dpx_10\"\r\n            android:text=\"转到后台\" />\r\n    </RelativeLayout>\r\n\r\n</LinearLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/res/layout/dialog_update_version.xml	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/res/layout/dialog_update_version.xml	(date 1615534642870)
@@ -70,7 +70,7 @@
             android:layout_centerInParent="true"
             android:text="升级" />
 
-        <com.xuexiang.xupdate.widget.NumberProgressBar
+        <com.daimajia.numberprogressbar.NumberProgressBar
             android:id="@+id/number_progress_bar"
             style="@style/NumberProgressBar_Relax_Blue"
             android:layout_width="match_parent"
Index: smart-base/src/main/java/com/bytemiracle/base/framework/http/JsonConverter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/http/JsonConverter.java	(date 1615771710877)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/http/JsonConverter.java	(date 1615771710877)
@@ -0,0 +1,24 @@
+package com.bytemiracle.base.framework.http;
+
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+
+/**
+ * 类功能：TODO:
+ *
+ * @author gwwang
+ * @date 2021/3/15 9:23
+ */
+public class JsonConverter {
+
+    public static Type getGenType(Class clazz) {
+        Type genType = clazz.getGenericSuperclass();
+        if (genType instanceof ParameterizedType) {
+            Type[] actualTypeArguments = ((ParameterizedType) genType).getActualTypeArguments();
+            if (actualTypeArguments.length > 0) {
+                return actualTypeArguments[0];
+            }
+        }
+        return Object.class;
+    }
+}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartDownloadRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartDownloadRequest.java	(date 1615782800418)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartDownloadRequest.java	(date 1615782800418)
@@ -0,0 +1,107 @@
+package com.bytemiracle.base.framework.http;
+
+import android.util.Log;
+
+import com.bytemiracle.base.framework.GlobalInstanceHolder;
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.callback.FileCallback;
+import com.lzy.okgo.model.Progress;
+import com.lzy.okgo.model.Response;
+import com.lzy.okgo.request.base.Request;
+
+import java.io.File;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * 类功能：基于okGo封装的下载请求
+ *
+ * @author gwwang
+ * @date 2021/3/12 10:14
+ */
+public class SmartDownloadRequest extends OkGoHttp {
+    private static final String TAG = "SmartDownloadRequest";
+    private static final SmartDownloadRequest instance = new SmartDownloadRequest();
+
+    public interface OnDownloadChangeListener {
+        void onProgress(float fraction);
+
+        void onSuccess(File file);
+
+        void onFailed(String reason);
+    }
+
+    public static SmartDownloadRequest get() {
+        return instance;
+    }
+
+    /**
+     * 创建get请求
+     *
+     * @param fileRemoteUrl  文件的服务器路径
+     * @param descFileDir    本地文件的存储路径
+     * @param descFileName   本地文件名
+     * @param resultListener 下载回调
+     * @return
+     */
+    public Object asyncDownloadRequest(String fileRemoteUrl,
+                                       String descFileDir,
+                                       String descFileName,
+                                       OnDownloadChangeListener resultListener) {
+        return asyncDownloadRequest(fileRemoteUrl, descFileDir, descFileName, new HashMap<>(), new HashMap<>(), resultListener);
+    }
+
+
+    /**
+     * 创建get请求
+     *
+     * @param fileRemoteUrl  文件的服务器路径
+     * @param descFileDir    本地文件的存储路径
+     * @param descFileName   本地文件名
+     * @param headers        请求头
+     * @param params         请求参数
+     * @param resultListener 下载回调
+     * @return
+     */
+    protected Object asyncDownloadRequest(String fileRemoteUrl,
+                                          String descFileDir,
+                                          String descFileName,
+                                          Map<String, Object> headers,
+                                          Map<String, Object> params,
+                                          OnDownloadChangeListener resultListener) {
+        Object requestTag = generateRequestTag(fileRemoteUrl);
+        OkGo.<File>get(fileRemoteUrl)
+                .tag(requestTag)
+                .headers(buildHttpHeaders(headers))
+                .params(buildHttpParams(params))
+                .execute(new FileCallback(descFileDir, descFileName) {
+                    @Override
+                    public void onStart(Request<File, ? extends Request> request) {
+                        Log.d(TAG, "开始下载:" + fileRemoteUrl);
+                    }
+
+                    @Override
+                    public void onSuccess(Response<File> response) {
+                        GlobalInstanceHolder.mainHandler().post(() -> resultListener.onSuccess(response.body()));
+                    }
+
+                    @Override
+                    public void downloadProgress(Progress progress) {
+                        GlobalInstanceHolder.mainHandler().post(() -> resultListener.onProgress(progress.fraction));
+                    }
+
+                    @Override
+                    public void onError(Response<File> response) {
+                        try {
+                            Class<? extends Throwable> causeReason = response.getException().getCause().getClass();
+                            if (causeReason.getName().contains("GaiException")) {
+                                GlobalInstanceHolder.mainHandler().post(() -> resultListener.onFailed("请检查网络设置"));
+                            }
+                        } catch (Exception e) {
+                            GlobalInstanceHolder.mainHandler().post(() -> resultListener.onFailed(e.toString()));
+                        }
+                    }
+                });
+        return requestTag;
+    }
+}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/update/UpdatePresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.base.framework.update;\r\n\r\nimport android.content.pm.PackageInfo;\r\nimport android.content.pm.PackageManager;\r\n\r\nimport com.alibaba.fastjson.JSON;\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.bytemiracle.base.framework.component.AbstractSplashActivity;\r\nimport com.bytemiracle.base.framework.component.BaseActivity;\r\nimport com.bytemiracle.base.framework.http.XHttpServiceImpl;\r\nimport com.bytemiracle.base.framework.listener.CommonAsyncListener;\r\nimport com.bytemiracle.base.framework.utils.ConstantsUtil;\r\nimport com.bytemiracle.base.framework.utils.EasySharedPreference;\r\nimport com.bytemiracle.base.framework.utils.JsonParser;\r\nimport com.bytemiracle.base.framework.utils.XToastUtils;\r\nimport com.xuexiang.xhttp2.XHttp;\r\nimport com.xuexiang.xhttp2.model.HttpHeaders;\r\nimport com.xuexiang.xupdate.proxy.IUpdateHttpService;\r\n\r\nimport java.lang.ref.WeakReference;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n/**\r\n * 类功能：升级业务类\r\n *\r\n * @author gwwang\r\n * @date 2021/3/10 11:02\r\n */\r\npublic class UpdatePresenter {\r\n    private static final int UNKNOWN_VERSION_CODE = 999;\r\n    private static final String UNKNOWN_VERSION_NAME = \"最新版本\";\r\n    protected WeakReference<BaseActivity> attachActivity;\r\n    private int newVersionCode;\r\n\r\n    /**\r\n     * 构造方法\r\n     *\r\n     * @param attachActivity 弹窗所依赖的界面\r\n     */\r\n    public UpdatePresenter(BaseActivity attachActivity) {\r\n        this.attachActivity = new WeakReference<>(attachActivity);\r\n    }\r\n\r\n    /**\r\n     * 获取版本名称\r\n     *\r\n     * @return\r\n     */\r\n    public String getVersionName() {\r\n        try {\r\n            PackageManager manager = attachActivity.get().getPackageManager();\r\n            PackageInfo pi = manager.getPackageInfo(attachActivity.get().getPackageName(), 0);\r\n            return pi.versionName;\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            return UNKNOWN_VERSION_NAME;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取版本名称\r\n     *\r\n     * @return\r\n     */\r\n    public int getVersionCode() {\r\n        try {\r\n            PackageManager manager = attachActivity.get().getPackageManager();\r\n            PackageInfo pi = manager.getPackageInfo(attachActivity.get().getPackageName(), 0);\r\n            return pi.versionCode;\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            return UNKNOWN_VERSION_CODE;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取当前最新版本号\r\n     * <p>\r\n     * VersionCode\t当前软件版本\r\n     * ProjectName\t项目名称\r\n     */\r\n    public void asyncGetNewLastVersion(CommonAsyncListener<String> listener) {\r\n        Map params = new HashMap<String, String>();\r\n        int curVersionCode = EasySharedPreference.get().getInt(AbstractSplashActivity.KEY_VERSION_CODE);\r\n        params.put(\"VersionCode\", curVersionCode);\r\n        params.put(\"ProjectName\", UpdateComponent.appName); //ServerCenter/Base_Project/Authorize\r\n        HttpHeaders commonHeaders = new HttpHeaders();\r\n        commonHeaders.put(\"Authorization\", \"Admin@ShaanxiByteMiracle\");\r\n        XHttp.getInstance().addCommonHeaders(commonHeaders).setBaseUrl(ConstantsUtil.DEVICEMANAGER_IP);\r\n        XHttpServiceImpl http = new XHttpServiceImpl();\r\n        http.asyncPost(\"/ServerCenter/Base_Upgrade/CompareVersion\", params, new IUpdateHttpService.Callback() {\r\n            @Override\r\n            public void onSuccess(String result) {\r\n                JSONObject object = JSON.parseObject(result);\r\n                JSONObject re = JSON.parseObject(object.getString(\"Data\"));\r\n                int VersionCode = re.getIntValue(\"VersionCode\");\r\n                String VersionName = re.getString(\"VersionName\");\r\n                if (newVersionCode == 0) {\r\n                    UpdatePresenter.this.newVersionCode = curVersionCode;\r\n                    listener.doSomething(getVersionName());\r\n                } else {\r\n                    UpdatePresenter.this.newVersionCode = VersionCode;\r\n                    listener.doSomething(VersionName);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(Throwable throwable) {\r\n                UpdatePresenter.this.newVersionCode = curVersionCode;\r\n                listener.doSomething(getVersionName());\r\n            }\r\n        });\r\n    }\r\n\r\n    public void updateNewVersion(CommonAsyncListener<UpdateResponse> responseListener) {\r\n        int curVersionCode = getVersionCode();\r\n        if (curVersionCode >= newVersionCode) {\r\n            XToastUtils.toast(\"当前为最新版本！\");\r\n            return;\r\n        }\r\n        Map params = new HashMap<String, String>();\r\n        params.put(\"VersionCode\", EasySharedPreference.get().getInt(AbstractSplashActivity.KEY_VERSION_CODE));\r\n        params.put(\"ProjectName\", UpdateComponent.appName);\r\n        HttpHeaders commonHeaders = new HttpHeaders();\r\n        commonHeaders.put(\"Authorization\", \"Admin@ShaanxiByteMiracle\");\r\n        XHttp.getInstance().addCommonHeaders(commonHeaders);\r\n        XHttpServiceImpl http = new XHttpServiceImpl();\r\n        http.asyncPost(\"/ServerCenter/Base_Upgrade/GetPackageFile\", params, new IUpdateHttpService.Callback() {\r\n            @Override\r\n            public void onSuccess(String result) {\r\n                UpdateResponse updateResponse = JsonParser.fromJson(result, UpdateResponse.class);\r\n                responseListener.doSomething(updateResponse);\r\n            }\r\n\r\n            @Override\r\n            public void onError(Throwable throwable) {\r\n                responseListener.doSomething(null);\r\n            }\r\n        });\r\n//        XHttpUpdateHttpServiceImpl http = new XHttpUpdateHttpServiceImpl();\r\n//        XUpdateInit.checkUpdate(attachActivity.get(), true, params, http);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/update/UpdatePresenter.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/update/UpdatePresenter.java	(date 1615779089463)
@@ -3,19 +3,14 @@
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 
-import com.alibaba.fastjson.JSON;
-import com.alibaba.fastjson.JSONObject;
 import com.bytemiracle.base.framework.component.AbstractSplashActivity;
 import com.bytemiracle.base.framework.component.BaseActivity;
-import com.bytemiracle.base.framework.http.XHttpServiceImpl;
+import com.bytemiracle.base.framework.http.OkGoHttp;
+import com.bytemiracle.base.framework.http.OnReceiveResult;
 import com.bytemiracle.base.framework.listener.CommonAsyncListener;
-import com.bytemiracle.base.framework.utils.ConstantsUtil;
+import com.bytemiracle.base.framework.update.bean.UpdateVersionResponse;
 import com.bytemiracle.base.framework.utils.EasySharedPreference;
-import com.bytemiracle.base.framework.utils.JsonParser;
 import com.bytemiracle.base.framework.utils.XToastUtils;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.model.HttpHeaders;
-import com.xuexiang.xupdate.proxy.IUpdateHttpService;
 
 import java.lang.ref.WeakReference;
 import java.util.HashMap;
@@ -57,21 +52,6 @@
         }
     }
 
-    /**
-     * 获取版本名称
-     *
-     * @return
-     */
-    public int getVersionCode() {
-        try {
-            PackageManager manager = attachActivity.get().getPackageManager();
-            PackageInfo pi = manager.getPackageInfo(attachActivity.get().getPackageName(), 0);
-            return pi.versionCode;
-        } catch (PackageManager.NameNotFoundException e) {
-            return UNKNOWN_VERSION_CODE;
-        }
-    }
-
     /**
      * 获取当前最新版本号
      * <p>
@@ -79,64 +59,59 @@
      * ProjectName	项目名称
      */
     public void asyncGetNewLastVersion(CommonAsyncListener<String> listener) {
+        int curVersionCode = EasySharedPreference.get().getInt(AbstractSplashActivity.KEY_VERSION_CODE);
+        Map headers = new HashMap<String, Object>();
+        headers.put("Authorization", "Admin@ShaanxiByteMiracle");
+
         Map params = new HashMap<String, String>();
-        int curVersionCode = EasySharedPreference.get().getInt(AbstractSplashActivity.KEY_VERSION_CODE);
         params.put("VersionCode", curVersionCode);
         params.put("ProjectName", UpdateComponent.appName); //ServerCenter/Base_Project/Authorize
-        HttpHeaders commonHeaders = new HttpHeaders();
-        commonHeaders.put("Authorization", "Admin@ShaanxiByteMiracle");
-        XHttp.getInstance().addCommonHeaders(commonHeaders).setBaseUrl(ConstantsUtil.DEVICEMANAGER_IP);
-        XHttpServiceImpl http = new XHttpServiceImpl();
-        http.asyncPost("/ServerCenter/Base_Upgrade/CompareVersion", params, new IUpdateHttpService.Callback() {
-            @Override
-            public void onSuccess(String result) {
-                JSONObject object = JSON.parseObject(result);
-                JSONObject re = JSON.parseObject(object.getString("Data"));
-                int VersionCode = re.getIntValue("VersionCode");
-                String VersionName = re.getString("VersionName");
-                if (newVersionCode == 0) {
-                    UpdatePresenter.this.newVersionCode = curVersionCode;
-                    listener.doSomething(getVersionName());
-                } else {
-                    UpdatePresenter.this.newVersionCode = VersionCode;
-                    listener.doSomething(VersionName);
-                }
-            }
+
+        OkGoHttp.newPostRequest().asyncRequestMachine("/ServerCenter/Base_Upgrade/CompareVersion",
+                headers, params, new OnReceiveResult<UpdateVersionResponse>() {
+                    @Override
+                    public void onSuccess(UpdateVersionResponse resultBean) {
+                        if (newVersionCode == 0) {
+                            UpdatePresenter.this.newVersionCode = curVersionCode;
+                            listener.doSomething(getVersionName());
+                        } else {
+                            UpdatePresenter.this.newVersionCode = resultBean.getData().getVersionCode();
+                            listener.doSomething(resultBean.getData().getVersionName());
+                        }
+                    }
 
-            @Override
-            public void onError(Throwable throwable) {
-                UpdatePresenter.this.newVersionCode = curVersionCode;
-                listener.doSomething(getVersionName());
-            }
-        });
+                    @Override
+                    public void onFailed(String reason) {
+                        UpdatePresenter.this.newVersionCode = curVersionCode;
+                        listener.doSomething(getVersionName());
+                    }
+                });
     }
 
     public void updateNewVersion(CommonAsyncListener<UpdateResponse> responseListener) {
-        int curVersionCode = getVersionCode();
+        int curVersionCode = 1;//EasySharedPreference.get().getInt(AbstractSplashActivity.KEY_VERSION_CODE);
         if (curVersionCode >= newVersionCode) {
             XToastUtils.toast("当前为最新版本！");
             return;
         }
         Map params = new HashMap<String, String>();
-        params.put("VersionCode", EasySharedPreference.get().getInt(AbstractSplashActivity.KEY_VERSION_CODE));
+        params.put("VersionCode", curVersionCode);
         params.put("ProjectName", UpdateComponent.appName);
-        HttpHeaders commonHeaders = new HttpHeaders();
+
+        Map commonHeaders = new HashMap<String, Object>();
         commonHeaders.put("Authorization", "Admin@ShaanxiByteMiracle");
-        XHttp.getInstance().addCommonHeaders(commonHeaders);
-        XHttpServiceImpl http = new XHttpServiceImpl();
-        http.asyncPost("/ServerCenter/Base_Upgrade/GetPackageFile", params, new IUpdateHttpService.Callback() {
-            @Override
-            public void onSuccess(String result) {
-                UpdateResponse updateResponse = JsonParser.fromJson(result, UpdateResponse.class);
-                responseListener.doSomething(updateResponse);
-            }
+
+        OkGoHttp.newPostRequest().asyncRequestMachine("/ServerCenter/Base_Upgrade/GetPackageFile",
+                commonHeaders, params, new OnReceiveResult<UpdateResponse>() {
+                    @Override
+                    public void onSuccess(UpdateResponse resultBean) {
+                        responseListener.doSomething(resultBean);
+                    }
 
-            @Override
-            public void onError(Throwable throwable) {
-                responseListener.doSomething(null);
-            }
-        });
-//        XHttpUpdateHttpServiceImpl http = new XHttpUpdateHttpServiceImpl();
-//        XUpdateInit.checkUpdate(attachActivity.get(), true, params, http);
+                    @Override
+                    public void onFailed(String reason) {
+                        responseListener.doSomething(null);
+                    }
+                });
     }
 }
Index: app/src/main/java/com/bytemiracle/project/contacts/controller/ContactsPresenter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.project.contacts.controller;\r\n\r\nimport android.app.Activity;\r\nimport android.util.Log;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.bytemiracle.base.framework.GlobalInstanceHolder;\r\nimport com.bytemiracle.base.framework.listener.CommonAsyncListener;\r\nimport com.bytemiracle.base.framework.preview.PreviewUtils;\r\nimport com.bytemiracle.base.framework.utils.ConstantsUtil;\r\nimport com.bytemiracle.base.framework.utils.EasySharedPreference;\r\nimport com.bytemiracle.base.framework.utils.XToastUtils;\r\nimport com.bytemiracle.base.framework.view.relationTree.CellRect;\r\nimport com.bytemiracle.project.AssistantApplication;\r\nimport com.bytemiracle.project.contacts.ContactsActivity;\r\nimport com.xuexiang.xhttp2.XHttp;\r\nimport com.xuexiang.xhttp2.callback.SimpleCallBack;\r\nimport com.xuexiang.xhttp2.exception.ApiException;\r\nimport com.xuexiang.xui.utils.WidgetUtils;\r\nimport com.xuexiang.xui.widget.dialog.LoadingDialog;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport cn.wildfirechat.client.ConnectionStatus;\r\nimport cn.wildfirechat.remote.ChatManager;\r\n\r\n/**\r\n * 类功能：数据获取\r\n *\r\n * @author gwwang\r\n * @date 2021/2/26 17:16\r\n */\r\npublic class ContactsPresenter {\r\n    private static final String TAG = \"ContactsPresenter\";\r\n\r\n    private boolean[] flagCompletes = {false, false};\r\n\r\n    public void openContactActivity(Activity activity) {\r\n        LoadingDialog mLoadingDialog = WidgetUtils.getLoadingDialog(activity).setIconScale(0.4F).setLoadingSpeed(8);\r\n        mLoadingDialog.updateMessage(\"正在获取最新数据……\");\r\n        mLoadingDialog.setCancelable(true);\r\n        mLoadingDialog.show();\r\n        new ContactsPresenter().asyncGetContactsData(success -> {\r\n            mLoadingDialog.dismiss();\r\n            if (!success) {\r\n                XToastUtils.info(\"获取通讯录数据失败!\");\r\n                return;\r\n            }\r\n            //获取数据后，\r\n            //1.通知应用进行长连接\r\n            boolean isConnected = ChatManager.Instance().getConnectionStatus() == ConnectionStatus.ConnectionStatusConnected;\r\n            if (!isConnected) {\r\n                String token = EasySharedPreference.get().getString(ConstantsUtil.APP_THIS_MACHINE_TOKEN, null);\r\n                String userId = EasySharedPreference.get().getString(ConstantsUtil.APP_THIS_MACHINE_BIND_USER_ID, null);\r\n                ((AssistantApplication) GlobalInstanceHolder.applicationContext()).startIMConnect(userId, token);\r\n            }\r\n            //2.打开界面\r\n            PreviewUtils.openActivity(activity, ContactsActivity.class);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * 调用数据接口\r\n     */\r\n    public void asyncGetContactsData(CommonAsyncListener<Boolean> asyncCompleteListener) {\r\n        //获取行政区划信息\r\n        aysncGetXzqhInfo(asyncCompleteListener);\r\n        //获取部门信息\r\n        asyncGetDeptInfo(asyncCompleteListener);\r\n    }\r\n\r\n    private boolean checkAllCompleted() {\r\n        boolean completed = true;\r\n        for (boolean asyncComplete : flagCompletes) {\r\n            if (!asyncComplete) {\r\n                completed = false;\r\n            }\r\n        }\r\n        return completed;\r\n    }\r\n\r\n    //获取部门用户信息\r\n    private void asyncGetDeptInfo(CommonAsyncListener<Boolean> asyncCompleteListener) {\r\n        XHttp.get(\"api-user/dept/contact\").baseUrl(ConstantsUtil.SERVER_ADDRESS).keepJson(true).execute(new SimpleCallBack<String>() {\r\n            @Override\r\n            public void onSuccess(String response) {\r\n                JSONObject responseJson = JSONObject.parseObject(response);\r\n                if (responseJson.getBoolean(\"flag\") == true) {\r\n                    String data = responseJson.getString(\"data\");\r\n                    if (StringUtils.isNotEmpty(data)) {\r\n                        if (EasySharedPreference.get().contains(ConstantsUtil.APP_DEPT_USER_INFO)) {\r\n                            EasySharedPreference.get().remove(ConstantsUtil.APP_DEPT_USER_INFO);\r\n                        }\r\n                        EasySharedPreference.get().put(ConstantsUtil.APP_DEPT_USER_INFO, data);\r\n                        Log.i(TAG, \"调用部门用户接口成功!\");\r\n                    }\r\n                }\r\n                flagCompletes[0] = true;\r\n                if (checkAllCompleted() && asyncCompleteListener != null) {\r\n                    asyncCompleteListener.doSomething(true);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(ApiException e) {\r\n                Log.e(TAG, \"调用部门用户口异常!\");\r\n                if (asyncCompleteListener != null) {\r\n                    asyncCompleteListener.doSomething(false);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    //获取行政区划信息\r\n    private void aysncGetXzqhInfo(CommonAsyncListener<Boolean> asyncCompleteListener) {\r\n        XHttp.get(\"model-manage/xzqh\").baseUrl(ConstantsUtil.SERVER_ADDRESS).keepJson(true).execute(new SimpleCallBack<String>() {\r\n            @Override\r\n            public void onSuccess(String response) {\r\n                JSONObject responseJson = JSONObject.parseObject(response);\r\n                if (responseJson.getBoolean(\"flag\") == true) {\r\n                    String data = responseJson.getString(\"data\");\r\n                    if (StringUtils.isNotEmpty(data)) {\r\n                        if (EasySharedPreference.get().contains(ConstantsUtil.APP_DIVISION_DICT)) {\r\n                            EasySharedPreference.get().remove(ConstantsUtil.APP_DIVISION_DICT);\r\n                        }\r\n                        EasySharedPreference.get().put(ConstantsUtil.APP_DIVISION_DICT, data);\r\n                        Log.i(TAG, \"调用行政区划接口成功!\");\r\n                    }\r\n                }\r\n                flagCompletes[1] = true;\r\n                if (checkAllCompleted() && asyncCompleteListener != null) {\r\n                    asyncCompleteListener.doSomething(true);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onError(ApiException e) {\r\n                Log.e(TAG, \"调用行政区划接口异常!\");\r\n                if (asyncCompleteListener != null) {\r\n                    asyncCompleteListener.doSomething(false);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private void recursiveBuildTextList(CellRect cell, ArrayList<String> results) {\r\n        results.add(cell.contentText);\r\n        if (cell.hasChild()) {\r\n            for (CellRect childCell : cell.childCells) {\r\n                recursiveBuildTextList(childCell, results);\r\n            }\r\n        }\r\n    }\r\n\r\n    public List<String> buildCellTextList(CellRect rootCell) {\r\n        ArrayList<String> results = new ArrayList<>();\r\n        recursiveBuildTextList(rootCell, results);\r\n        return results;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/contacts/controller/ContactsPresenter.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/contacts/controller/ContactsPresenter.java	(date 1615537674050)
@@ -5,6 +5,8 @@
 
 import com.alibaba.fastjson.JSONObject;
 import com.bytemiracle.base.framework.GlobalInstanceHolder;
+import com.bytemiracle.base.framework.http.OkGoHttp;
+import com.bytemiracle.base.framework.http.OnReceiveResult;
 import com.bytemiracle.base.framework.listener.CommonAsyncListener;
 import com.bytemiracle.base.framework.preview.PreviewUtils;
 import com.bytemiracle.base.framework.utils.ConstantsUtil;
@@ -13,15 +15,13 @@
 import com.bytemiracle.base.framework.view.relationTree.CellRect;
 import com.bytemiracle.project.AssistantApplication;
 import com.bytemiracle.project.contacts.ContactsActivity;
-import com.xuexiang.xhttp2.XHttp;
-import com.xuexiang.xhttp2.callback.SimpleCallBack;
-import com.xuexiang.xhttp2.exception.ApiException;
 import com.xuexiang.xui.utils.WidgetUtils;
 import com.xuexiang.xui.widget.dialog.LoadingDialog;
 
 import org.apache.commons.lang3.StringUtils;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
 
 import cn.wildfirechat.client.ConnectionStatus;
@@ -85,10 +85,15 @@
 
     //获取部门用户信息
     private void asyncGetDeptInfo(CommonAsyncListener<Boolean> asyncCompleteListener) {
-        XHttp.get("api-user/dept/contact").baseUrl(ConstantsUtil.SERVER_ADDRESS).keepJson(true).execute(new SimpleCallBack<String>() {
+        OkGoHttp.newGetRequest().asyncRequestApi("api-user/dept/contact", new HashMap<>(), new OnReceiveResult() {
+            @Override
+            public void onSuccess(Object resultBean) {
+
+            }
+
             @Override
-            public void onSuccess(String response) {
-                JSONObject responseJson = JSONObject.parseObject(response);
+            public void onJson(String json) {
+                JSONObject responseJson = JSONObject.parseObject(json);
                 if (responseJson.getBoolean("flag") == true) {
                     String data = responseJson.getString("data");
                     if (StringUtils.isNotEmpty(data)) {
@@ -106,7 +111,7 @@
             }
 
             @Override
-            public void onError(ApiException e) {
+            public void onFailed(String reason) {
                 Log.e(TAG, "调用部门用户口异常!");
                 if (asyncCompleteListener != null) {
                     asyncCompleteListener.doSomething(false);
@@ -117,10 +122,14 @@
 
     //获取行政区划信息
     private void aysncGetXzqhInfo(CommonAsyncListener<Boolean> asyncCompleteListener) {
-        XHttp.get("model-manage/xzqh").baseUrl(ConstantsUtil.SERVER_ADDRESS).keepJson(true).execute(new SimpleCallBack<String>() {
+        OkGoHttp.newGetRequest().asyncRequestApi("model-manage/xzqh", new HashMap<>(), new OnReceiveResult() {
             @Override
-            public void onSuccess(String response) {
-                JSONObject responseJson = JSONObject.parseObject(response);
+            public void onSuccess(Object resultBean) {
+            }
+
+            @Override
+            public void onJson(String json) {
+                JSONObject responseJson = JSONObject.parseObject(json);
                 if (responseJson.getBoolean("flag") == true) {
                     String data = responseJson.getString("data");
                     if (StringUtils.isNotEmpty(data)) {
@@ -138,7 +147,7 @@
             }
 
             @Override
-            public void onError(ApiException e) {
+            public void onFailed(String reason) {
                 Log.e(TAG, "调用行政区划接口异常!");
                 if (asyncCompleteListener != null) {
                     asyncCompleteListener.doSomething(false);
Index: app/src/main/java/com/bytemiracle/project/settings/repository/SettingsRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bytemiracle.project.settings.repository;\r\n\r\nimport com.alibaba.fastjson.JSONObject;\r\nimport com.bytemiracle.base.framework.view.pagetools.PolygonDataBean;\r\nimport com.bytemiracle.project.R;\r\nimport com.bytemiracle.project.settings.subfragment.AccountFragment;\r\nimport com.bytemiracle.project.settings.subfragment.AppGuideFragment;\r\nimport com.bytemiracle.project.settings.subfragment.FeedbackFragment;\r\nimport com.bytemiracle.project.settings.subfragment.PolygonDataUpdateFragment;\r\nimport com.bytemiracle.project.settings.subfragment.SettingSubFragment;\r\nimport com.bytemiracle.project.settings.subfragment.SupportFragment;\r\nimport com.bytemiracle.project.settings.subfragment.VersionUpdateFragment;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class SettingsRepository {\r\n    public static final int TAG_VERSION_UPDATE = 0;\r\n    public static final int TAG_DATA_UPDATE = 1;\r\n    public static final int TAG_APP_GUIDE = 2;\r\n    public static final int TAG_Settings = 3;\r\n    public static final int TAG_SUPPORT = 4;\r\n    public static final int TAG_ACCOUNT = 5;\r\n    public static final int TAG_FEEDBACK = 6;\r\n\r\n    public static List<SettingTabPojo> provideTabs() {\r\n        //屏蔽 系统设置和数据更新模块\r\n        List<SettingTabPojo> settingTabPojos = new ArrayList<>();\r\n        settingTabPojos.add(new SettingTabPojo(R.string.text_setting_version_update, R.drawable.setting_sub_version_update, VersionUpdateFragment.class));\r\n        SettingTabPojo e = new SettingTabPojo(R.string.text_setting_data_update, R.drawable.setting_sub_download, PolygonDataUpdateFragment.class, false);\r\n        e.setIndicatorText(\"3\");\r\n        settingTabPojos.add(e);\r\n        settingTabPojos.add(new SettingTabPojo(R.string.text_setting_app_guide, R.drawable.setting_sub_guide, AppGuideFragment.class));\r\n        settingTabPojos.add(new SettingTabPojo(R.string.text_setting_settings, R.drawable.setting_sub_settings, SettingSubFragment.class, false));\r\n        settingTabPojos.add(new SettingTabPojo(R.string.text_setting_support, R.drawable.setting_sub_support, SupportFragment.class));\r\n        settingTabPojos.add(new SettingTabPojo(R.string.text_setting_account, R.drawable.setting_sub_account, AccountFragment.class));\r\n        settingTabPojos.add(new SettingTabPojo(R.string.text_setting_feedback, R.drawable.setting_sub_feedback, FeedbackFragment.class));\r\n        return settingTabPojos;\r\n    }\r\n\r\n    public static List<SettingStylePojo> provideStyles() {\r\n        List<SettingStylePojo> styles = new ArrayList<>();\r\n        styles.add(new SettingStylePojo(\"暗黑系\", R.drawable.image_style_white));\r\n        styles.add(new SettingStylePojo(\"暖风系\", R.drawable.image_style_white));\r\n        styles.add(new SettingStylePojo(\"白天系\", R.drawable.image_style_white));\r\n        return styles;\r\n    }\r\n\r\n    public static List<ContactPojo> provideContacts(SupportFragment fragment) {\r\n        ArrayList<ContactPojo> contacts = new ArrayList<>();\r\n        contacts.add(new ContactPojo(\"钟新利\", \"18602937011\"));\r\n        contacts.add(new ContactPojo(\"王小刚\", \"19991197173\"));\r\n        contacts.add(new ContactPojo(fragment.getString(R.string.text_setting_liu_ping), \"15902995156\"));\r\n        contacts.add(new ContactPojo(\"QQ技术群\", \"754078551\", false));\r\n        return contacts;\r\n    }\r\n\r\n    public static List<PersonalInfoPojo> providePersonalInfos() {\r\n        ArrayList<PersonalInfoPojo> personalInfos = new ArrayList<>();\r\n        personalInfos.add(new PersonalInfoPojo(\"姓名\", \"\"));\r\n        personalInfos.add(new PersonalInfoPojo(\"电话\", \"\"));\r\n        personalInfos.add(new PersonalInfoPojo(\"部门\", \"\", true));\r\n        personalInfos.add(new PersonalInfoPojo(\"职位\", \"\"));\r\n        personalInfos.add(new PersonalInfoPojo(\"工号\", \"\"));\r\n        return personalInfos;\r\n    }\r\n\r\n    public static List<PersonalInfoPojo> providePersonalInfos(JSONObject accountJson) {\r\n        ArrayList<PersonalInfoPojo> personalInfos = new ArrayList<>();\r\n        personalInfos.add(new PersonalInfoPojo(\"姓名\", StringUtils.isEmpty(accountJson.getString(\"nickname\")) ? \"\" :\r\n                accountJson.getString(\"nickname\")));\r\n        personalInfos.add(new PersonalInfoPojo(\"电话\", StringUtils.isEmpty(accountJson.getString(\"mobile\")) ? \"\" :\r\n                accountJson.getString(\"mobile\")));\r\n        personalInfos.add(new PersonalInfoPojo(\"部门\", StringUtils.isEmpty(accountJson.getString(\"type\")) ? \"\" :\r\n                accountJson.getString(\"type\"), true));\r\n        personalInfos.add(new PersonalInfoPojo(\"职位\", StringUtils.isEmpty(accountJson.getString(\"position\")) ? \"\" :\r\n                accountJson.getString(\"position\")));\r\n        personalInfos.add(new PersonalInfoPojo(\"工号\", StringUtils.isEmpty(accountJson.getString(\"workNum\")) ? \"\" :\r\n                accountJson.getString(\"workNum\")));\r\n        return personalInfos;\r\n    }\r\n\r\n\r\n    public static List<PolygonDataBean> providePolygonData() {\r\n        ArrayList<PolygonDataBean> polygonDataBeans = new ArrayList<>();\r\n        for (int i = 0; i < 230; i++) {\r\n            polygonDataBeans.add(new PolygonDataBean(i));\r\n        }\r\n        return polygonDataBeans;\r\n    }\r\n\r\n    public static List<ProblemPoint> provideProblemPoints() {\r\n        ArrayList<ProblemPoint> problemPoints = new ArrayList<>();\r\n        problemPoints.add(new ProblemPoint(\"功能异常：功能故障或不可用\"));\r\n        problemPoints.add(new ProblemPoint(\"产品建议：使用有问题，我有建议\"));\r\n        problemPoints.add(new ProblemPoint(\"安全问题：有关密码、隐私、保密等\"));\r\n        problemPoints.add(new ProblemPoint(\"平板问题：无法使用等\"));\r\n        problemPoints.add(new ProblemPoint(\"其他问题\"));\r\n        return problemPoints;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/settings/repository/SettingsRepository.java	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/src/main/java/com/bytemiracle/project/settings/repository/SettingsRepository.java	(date 1615533921680)
@@ -1,8 +1,8 @@
 package com.bytemiracle.project.settings.repository;
 
-import com.alibaba.fastjson.JSONObject;
 import com.bytemiracle.base.framework.view.pagetools.PolygonDataBean;
 import com.bytemiracle.project.R;
+import com.bytemiracle.project.login.bean.LoginResponse;
 import com.bytemiracle.project.settings.subfragment.AccountFragment;
 import com.bytemiracle.project.settings.subfragment.AppGuideFragment;
 import com.bytemiracle.project.settings.subfragment.FeedbackFragment;
@@ -67,18 +67,18 @@
         return personalInfos;
     }
 
-    public static List<PersonalInfoPojo> providePersonalInfos(JSONObject accountJson) {
+    public static List<PersonalInfoPojo> providePersonalInfos(LoginResponse.DataDTO accountInfo) {
         ArrayList<PersonalInfoPojo> personalInfos = new ArrayList<>();
-        personalInfos.add(new PersonalInfoPojo("姓名", StringUtils.isEmpty(accountJson.getString("nickname")) ? "" :
-                accountJson.getString("nickname")));
-        personalInfos.add(new PersonalInfoPojo("电话", StringUtils.isEmpty(accountJson.getString("mobile")) ? "" :
-                accountJson.getString("mobile")));
-        personalInfos.add(new PersonalInfoPojo("部门", StringUtils.isEmpty(accountJson.getString("type")) ? "" :
-                accountJson.getString("type"), true));
-        personalInfos.add(new PersonalInfoPojo("职位", StringUtils.isEmpty(accountJson.getString("position")) ? "" :
-                accountJson.getString("position")));
-        personalInfos.add(new PersonalInfoPojo("工号", StringUtils.isEmpty(accountJson.getString("workNum")) ? "" :
-                accountJson.getString("workNum")));
+        personalInfos.add(new PersonalInfoPojo("姓名", StringUtils.isEmpty(accountInfo.getNickname()) ? "" :
+                accountInfo.getNickname()));
+        personalInfos.add(new PersonalInfoPojo("电话", StringUtils.isEmpty(accountInfo.getMobile()) ? "" :
+                accountInfo.getMobile()));
+        personalInfos.add(new PersonalInfoPojo("部门", StringUtils.isEmpty(accountInfo.getType()) ? "" :
+                accountInfo.getType(), true));
+        personalInfos.add(new PersonalInfoPojo("职位", StringUtils.isEmpty(accountInfo.getPosition()) ? "" :
+                accountInfo.getPosition()));
+        personalInfos.add(new PersonalInfoPojo("工号", StringUtils.isEmpty(accountInfo.getWorkNum()) ? "" :
+                accountInfo.getWorkNum()));
         return personalInfos;
     }
 
Index: smart-base/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\r\napply plugin: 'com.jakewharton.butterknife'\r\n//自动添加X-Library依赖\r\napply from: '../x-library.gradle'\r\n\r\nandroid {\r\n    compileSdkVersion rootProject.extensions.ext.compileSdkVersion\r\n\r\n    defaultConfig {\r\n        minSdkVersion rootProject.extensions.ext.minSdkVersion\r\n        targetSdkVersion rootProject.extensions.ext.targetSdkVersion\r\n\r\n        javaCompileOptions {\r\n            annotationProcessorOptions {\r\n                arguments = [moduleName: project.getName()]\r\n            }\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n}\r\n\r\ndependencies {\r\n    //原生控件功能\r\n    api 'androidx.appcompat:appcompat:1.1.0'\r\n    api 'com.google.android.material:material:1.1.0-alpha10'\r\n\r\n    //-------------------工具类start--------------------------------\r\n    //butterknife 控件注解\r\n    api 'com.jakewharton:butterknife:10.2.3'\r\n    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'\r\n\r\n    //数据库(实质该处引入仅仅为了引入@Transit注解)\r\n    api 'org.greenrobot:greendao:3.2.2'\r\n    //数据库升级（引入temp迁移表）\r\n    api 'com.github.yuweiguocn:GreenDaoUpgradeHelper:v2.2.1'\r\n\r\n    // eventbus\r\n    api 'org.greenrobot:eventbus:3.2.0'\r\n\r\n    //内存观察\r\n    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'\r\n    //-------------------工具类end--------------------------------\r\n\r\n\r\n    //-------------------控件类start-------------------------\r\n    //1.\r\n    api 'com.alibaba.android:vlayout:1.2.8'\r\n    //2.列表侧滑菜单\r\n    api 'com.yanzhenjie.recyclerview:support:1.3.2'\r\n    api 'com.zhy:okhttputils:2.6.2'\r\n    //3.图片选择器\r\n    api 'com.github.LuckSiege.PictureSelector:picture_library:v2.6.0'\r\n    //4.android图表框架\r\n    api 'com.github.PhilJay:MPAndroidChart:v3.1.0'\r\n    api 'com.github.huangyanbin:SmartTable:2.2.0'\r\n    //-------------------控件类end-------------------------\r\n\r\n\r\n    //-------------------其余组件start-------------------------\r\n    // rabbitmq\r\n    api 'com.rabbitmq:amqp-client:5.7.0'\r\n    //RxUtil2\r\n    api 'io.reactivex.rxjava2:rxjava:2.2.0'\r\n    api 'io.reactivex.rxjava2:rxandroid:2.1.0'\r\n    api 'io.reactivex.rxjava2:rxandroid:2.0.1'\r\n    //RxBinding的sdk\r\n    api 'com.jakewharton.rxbinding2:rxbinding:2.1.1'\r\n    // easypermissions\r\n    api 'pub.devrel:easypermissions:3.0.0'\r\n    api 'com.squareup.retrofit2:retrofit:2.5.0'\r\n    api 'com.squareup.retrofit2:converter-gson:2.5.0'\r\n    //网络请求\r\n    api 'com.squareup.okhttp3:okhttp:3.10.0'\r\n    api 'com.github.bumptech.glide:glide:4.11.0'\r\n    //阿里解析json\r\n    api 'com.alibaba:fastjson:1.1.54.android'\r\n    api 'com.google.code.gson:gson:2.8.5'\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/build.gradle	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ smart-base/build.gradle	(date 1615534599470)
@@ -24,6 +24,7 @@
 }
 
 dependencies {
+    api fileTree(dir: 'libs', include: ['*.jar'])
     //原生控件功能
     api 'androidx.appcompat:appcompat:1.1.0'
     api 'com.google.android.material:material:1.1.0-alpha10'
@@ -57,6 +58,8 @@
     //4.android图表框架
     api 'com.github.PhilJay:MPAndroidChart:v3.1.0'
     api 'com.github.huangyanbin:SmartTable:2.2.0'
+    //进度条
+    api 'com.daimajia.numberprogressbar:library:1.4@aar'
     //-------------------控件类end-------------------------
 
 
Index: smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartHttpClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartHttpClient.java	(date 1615785434341)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartHttpClient.java	(date 1615785434341)
@@ -0,0 +1,62 @@
+package com.bytemiracle.base.framework.http;
+
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.interceptor.HttpLoggingInterceptor;
+
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+
+import okhttp3.OkHttpClient;
+
+/**
+ * 类功能：网络请求配置类
+ *
+ * @author gwwang
+ * @date 2021/3/12 10:20
+ */
+public class SmartHttpClient {
+    private static final String TAG = "SmartOkHttpClient";
+
+    private final OkHttpClient.Builder builder;
+    private static final SmartHttpClient instance = new SmartHttpClient();
+
+    public SmartHttpClient() {
+        builder = new OkHttpClient.Builder();
+    }
+
+    public static SmartHttpClient newClient() {
+        return instance;
+    }
+
+    /**
+     * log打印级别，决定了log显示的详细程度
+     *
+     * @return
+     */
+    public SmartHttpClient configLog(String logTag) {
+        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor(TAG + "_" + logTag);
+        loggingInterceptor.setPrintLevel(HttpLoggingInterceptor.Level.BODY);
+        loggingInterceptor.setColorLevel(Level.INFO);
+        builder.addInterceptor(loggingInterceptor);
+        return this;
+    }
+
+    /**
+     * 配置超时时间
+     *
+     * @return
+     */
+    public SmartHttpClient configTimeout() {
+        //全局的读取超时时间
+        builder.readTimeout(OkGo.DEFAULT_MILLISECONDS, TimeUnit.MILLISECONDS);
+        //全局的写入超时时间
+        builder.writeTimeout(OkGo.DEFAULT_MILLISECONDS, TimeUnit.MILLISECONDS);
+        //全局的连接超时时间
+        builder.connectTimeout(OkGo.DEFAULT_MILLISECONDS, TimeUnit.MILLISECONDS);
+        return this;
+    }
+
+    public OkHttpClient build() {
+        return builder.build();
+    }
+}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartPostRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartPostRequest.java	(date 1615785265604)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartPostRequest.java	(date 1615785265604)
@@ -0,0 +1,139 @@
+package com.bytemiracle.base.framework.http;
+
+import com.google.gson.Gson;
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.callback.StringCallback;
+import com.lzy.okgo.model.Response;
+import com.lzy.okgo.request.PostRequest;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * 类功能：基于okGo封装的POST请求
+ *
+ * @author gwwang
+ * @date 2021/3/12 10:14
+ */
+public class SmartPostRequest extends OkGoHttp {
+    private static final String TAG = "SmartPostRequest";
+    private static final SmartPostRequest instance = new SmartPostRequest();
+
+    public static SmartPostRequest get() {
+        return instance;
+    }
+
+    /**
+     * 创建api请求
+     *
+     * @param methodName
+     * @param params
+     * @param
+     * @return
+     */
+    public Object asyncRequestApi(String methodName, Map<String, Object> params, OnReceiveResult resultListener) {
+        return asyncRequestApi(methodName, new HashMap<>(), params, true, resultListener);
+    }
+
+    /**
+     * 创建api form表单请求
+     *
+     * @param methodName
+     * @param params
+     * @param
+     * @return
+     */
+    public Object asyncRequestApiUseForm(String methodName, Map<String, Object> params, OnReceiveResult resultListener) {
+        return asyncRequestApi(methodName, new HashMap<>(), params, false, resultListener);
+    }
+
+
+    /**
+     * 创建api请求
+     *
+     * @param methodName
+     * @param headers
+     * @param params
+     * @param
+     * @return
+     */
+    public Object asyncRequestApi(String methodName, Map<String, Object> headers, Map<String, Object> params, boolean useJson, OnReceiveResult resultListener) {
+        return asyncPostRequest(BASE_API_URL, methodName, headers, params, useJson, resultListener);
+    }
+
+    /**
+     * 创建machine请求
+     *
+     * @param methodName
+     * @param params
+     * @param
+     * @return
+     */
+    public Object asyncRequestMachine(String methodName, Map<String, Object> params, OnReceiveResult resultListener) {
+        return asyncRequestMachine(methodName, new HashMap<>(), params, resultListener);
+    }
+
+    /**
+     * 创建machine请求
+     *
+     * @param methodName
+     * @param headers
+     * @param params
+     * @param
+     * @return
+     */
+    public Object asyncRequestMachine(String methodName, Map<String, Object> headers, Map<String, Object> params, OnReceiveResult resultListener) {
+        return asyncPostRequest(BASE_MACHINE_URL, methodName, headers, params, true, resultListener);
+    }
+
+
+    /**
+     * 创建get请求
+     *
+     * @param baseUrl    baseUrl的路径
+     * @param methodName 请求的action
+     * @param headers    请求头
+     * @param params     请求参数
+     * @param useJson    使用json参数
+     * @return
+     */
+    protected Object asyncPostRequest(String baseUrl, String methodName,
+                                      Map<String, Object> headers,
+                                      Map<String, Object> params,
+                                      boolean useJson,
+                                      OnReceiveResult resultListener) {
+        Object requestTag = generateRequestTag(methodName);
+        PostRequest<String> postRequest = OkGo
+                .<String>post(baseUrl + methodName)
+                .tag(requestTag)
+                .headers(buildHttpHeaders(headers));
+        if (useJson) {
+            postRequest.upJson(buildHttpJson(params));
+        } else {
+            postRequest.params(buildHttpParams(params));
+        }
+        postRequest.execute(new StringCallback() {
+            @Override
+            public void onSuccess(Response<String> response) {
+                String jsonBody = response.body();
+                resultListener.onJson(jsonBody);
+                Type genType = JsonConverter.getGenType(resultListener.getClass());
+                resultListener.onSuccess(new Gson().fromJson(jsonBody, genType));
+            }
+
+            @Override
+            public void onError(Response<String> response) {
+                try {
+                    Class<? extends Throwable> causeReason = response.getException().getCause().getClass();
+                    if (causeReason.getName().contains("GaiException")) {
+                        resultListener.onFailed("请检查网络设置");
+                    }
+                } catch (Exception e) {
+                    resultListener.onFailed(e.toString());
+                }
+            }
+        });
+        return requestTag;
+    }
+}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartGetRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartGetRequest.java	(date 1615772798090)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/http/SmartGetRequest.java	(date 1615772798090)
@@ -0,0 +1,115 @@
+package com.bytemiracle.base.framework.http;
+
+
+import com.google.gson.Gson;
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.callback.StringCallback;
+import com.lzy.okgo.model.Response;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * 类功能：基于okGo封装哥GET请求
+ *
+ * @author gwwang
+ * @date 2021/3/12 10:14
+ */
+public class SmartGetRequest extends OkGoHttp {
+    private static final String TAG = "SmartGetRequest";
+    private static final SmartGetRequest instance = new SmartGetRequest();
+
+    public static SmartGetRequest get() {
+        return instance;
+    }
+
+    /**
+     * 创建api请求
+     *
+     * @param methodName
+     * @param params
+     * @param
+     * @return
+     */
+    public Object asyncRequestApi(String methodName, Map<String, Object> params, OnReceiveResult resultListener) {
+        return asyncRequestApi(methodName, new HashMap<>(), params, resultListener);
+    }
+
+    /**
+     * 创建api请求
+     *
+     * @param methodName
+     * @param headers
+     * @param params
+     * @param
+     * @return
+     */
+    public Object asyncRequestApi(String methodName, Map<String, Object> headers, Map<String, Object> params, OnReceiveResult resultListener) {
+        return asyncGetRequest(BASE_API_URL, methodName, headers, params, resultListener);
+    }
+
+    /**
+     * 创建machine请求
+     *
+     * @param methodName
+     * @param params
+     * @param
+     * @return
+     */
+    public Object asyncRequestMachine(String methodName, Map<String, Object> params, OnReceiveResult resultListener) {
+        return asyncRequestMachine(methodName, new HashMap<>(), params, resultListener);
+    }
+
+    /**
+     * 创建machine请求
+     *
+     * @param methodName
+     * @param headers
+     * @param params
+     * @param
+     * @return
+     */
+    public Object asyncRequestMachine(String methodName, Map<String, Object> headers, Map<String, Object> params, OnReceiveResult resultListener) {
+        return asyncGetRequest(BASE_MACHINE_URL, methodName, headers, params, resultListener);
+    }
+
+    /**
+     * 创建get请求
+     *
+     * @param baseUrl    baseUrl的路径
+     * @param methodName 请求的action
+     * @param headers    请求头
+     * @param params     请求参数
+     * @return
+     */
+    protected Object asyncGetRequest(String baseUrl, String methodName, Map<String, Object> headers, Map<String, Object> params, OnReceiveResult resultListener) {
+        Object requestTag = generateRequestTag(methodName);
+        OkGo.<String>get(baseUrl + methodName)
+                .tag(requestTag)
+                .headers(buildHttpHeaders(headers))
+                .params(buildHttpParams(params))
+                .execute(new StringCallback() {
+                    @Override
+                    public void onSuccess(Response<String> response) {
+                        String jsonBody = response.body();
+                        resultListener.onJson(jsonBody);
+                        Type genType = JsonConverter.getGenType(resultListener.getClass());
+                        resultListener.onSuccess(new Gson().fromJson(jsonBody, genType));
+                    }
+
+                    @Override
+                    public void onError(Response<String> response) {
+                        try {
+                            Class<? extends Throwable> causeReason = response.getException().getCause().getClass();
+                            if (causeReason.getName().contains("GaiException")) {
+                                resultListener.onFailed("请检查网络设置");
+                            }
+                        } catch (Exception e) {
+                            resultListener.onFailed(e.toString());
+                        }
+                    }
+                });
+        return requestTag;
+    }
+}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/http/OkGoHttp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/http/OkGoHttp.java	(date 1615785726725)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/http/OkGoHttp.java	(date 1615785726725)
@@ -0,0 +1,156 @@
+package com.bytemiracle.base.framework.http;
+
+import android.app.Application;
+
+import com.bytemiracle.base.framework.utils.ConstantsUtil;
+import com.bytemiracle.base.framework.utils.JsonParser;
+import com.lzy.okgo.OkGo;
+import com.lzy.okgo.cache.CacheEntity;
+import com.lzy.okgo.cache.CacheMode;
+import com.lzy.okgo.model.HttpHeaders;
+import com.lzy.okgo.model.HttpParams;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import okhttp3.OkHttpClient;
+
+/**
+ * 类功能：基于okGo封装适用本应用的网络请求，含：
+ * 1.get请求，post请求
+ * 2.配置公共的请求头
+ *
+ * @author gwwang
+ * @date 2021/3/12 10:14
+ */
+public class OkGoHttp {
+    private static final String TAG = "OkGoHttp";
+    protected static final String BASE_MACHINE_URL = ConstantsUtil.DEVICEMANAGER_IP;
+    protected static final String BASE_API_URL = ConstantsUtil.SERVER_ADDRESS;
+
+    /**
+     * 初始化
+     *
+     * @param context 上下文
+     */
+    public static void init(Application context) {
+        init(context, new HashMap<>());
+    }
+
+    /**
+     * 初始化
+     *
+     * @param context 上下文
+     * @param headers 全局的请求头
+     */
+    public static void init(Application context, Map<String, Object> headers) {
+        OkHttpClient okHttpClient = SmartHttpClient.newClient().configLog(TAG).configTimeout().build();
+        OkGo.getInstance().init(context)
+                .setOkHttpClient(okHttpClient)
+                .setCacheMode(CacheMode.NO_CACHE)               //全局统一缓存模式，默认不使用缓存，可以不传
+                .setCacheTime(CacheEntity.CACHE_NEVER_EXPIRE)   //全局统一缓存时间，默认永不过期，可以不传
+                .setRetryCount(2)                               //全局统一超时重连次数，默认为三次，那么最差的情况会请求4次(一次原始请求，三次重连请求)，不需要可以设置为0
+                .addCommonHeaders(buildHttpHeaders(headers));   //全局公共头
+    }
+
+    /**
+     * 创建get请求
+     *
+     * @return
+     */
+    public static SmartGetRequest newGetRequest() {
+        return SmartGetRequest.get();
+    }
+
+    /**
+     * 创建post请求
+     *
+     * @return
+     */
+    public static SmartPostRequest newPostRequest() {
+        return SmartPostRequest.get();
+    }
+
+    /**
+     * 创建下载请求
+     */
+    public static SmartDownloadRequest newDownloadRequest() {
+        return SmartDownloadRequest.get();
+    }
+
+    /**
+     * 创建上传请求
+     */
+    public static SmartUploadRequest newUploadRequest() {
+        return SmartUploadRequest.get();
+    }
+
+    /**
+     * 构建请求参数
+     *
+     * @param params
+     * @return
+     */
+    protected HttpParams buildHttpParams(Map<String, Object> params) {
+        HttpParams httpParams = new HttpParams();
+        if (params != null && !params.isEmpty()) {
+            for (Map.Entry<String, Object> entry : params.entrySet()) {
+                httpParams.put(entry.getKey(), String.valueOf(entry.getValue()));
+            }
+        }
+        return httpParams;
+    }
+
+    /**
+     * 构建请求参数
+     *
+     * @param params
+     * @return
+     */
+    protected String buildHttpJson(Map<String, Object> params) {
+        return JsonParser.toJson(wrapObjectElement(params));
+    }
+
+
+    /**
+     * 构建请求头
+     *
+     * @param headers
+     * @return
+     */
+    protected static HttpHeaders buildHttpHeaders(Map<String, Object> headers) {
+        HttpHeaders httpHeaders = new HttpHeaders();
+        if (headers != null && !headers.isEmpty()) {
+            for (Map.Entry<String, Object> entry : headers.entrySet()) {
+                httpHeaders.put(entry.getKey(), String.valueOf(entry.getValue()));
+            }
+        }
+        return httpHeaders;
+    }
+
+    /**
+     * 将object类型元素转化为string类型
+     *
+     * @param maps
+     * @return
+     */
+    protected static Map<String, String> wrapObjectElement(Map<String, Object> maps) {
+        Map<String, String> stringMap = new HashMap<>();
+        if (maps != null && !maps.isEmpty()) {
+            for (Map.Entry<String, Object> entry : maps.entrySet()) {
+                stringMap.put(entry.getKey(), String.valueOf(entry.getValue()));
+            }
+        }
+        return stringMap;
+    }
+
+    /**
+     * 生成请求tag
+     *
+     * @param methodName
+     * @return
+     */
+    protected Object generateRequestTag(String methodName) {
+        return methodName + System.currentTimeMillis();
+    }
+}
Index: smart-base/src/main/java/com/bytemiracle/base/framework/http/OnReceiveResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/http/OnReceiveResult.java	(date 1615531998527)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/http/OnReceiveResult.java	(date 1615531998527)
@@ -0,0 +1,16 @@
+package com.bytemiracle.base.framework.http;
+
+/**
+ * 类功能：TODO:
+ *
+ * @author gwwang
+ * @date 2021/3/12 14:53
+ */
+public abstract class OnReceiveResult<T> {
+    public abstract void onSuccess(T resultBean);
+
+    public abstract void onFailed(String reason);
+
+    public void onJson(String json) {
+    }
+}
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'com.jakewharton.butterknife'\r\napply plugin: 'org.greenrobot.greendao'\r\napply plugin: 'com.xuexiang.xaop'\r\n//自动添加X-Library依赖\r\napply from: '../x-library.gradle'\r\n\r\nandroid {\r\n    compileSdkVersion rootProject.ext.compileSdkVersion\r\n    buildToolsVersion rootProject.ext.buildToolsVersion\r\n\r\n    defaultConfig {\r\n        applicationId rootProject.ext.applicationId\r\n        minSdkVersion rootProject.ext.minSdkVersion\r\n        targetSdkVersion rootProject.ext.targetSdkVersion\r\n        versionCode rootProject.ext.versionCode\r\n        versionName rootProject.ext.versionName\r\n\r\n        multiDexEnabled true\r\n        vectorDrawables.useSupportLibrary = true\r\n\r\n        javaCompileOptions {\r\n            annotationProcessorOptions {\r\n                arguments = [moduleName: project.getName()]\r\n            }\r\n        }\r\n\r\n        externalNativeBuild {\r\n            cmake {\r\n                abiFilters \"arm64-v8a\" //\"armeabi-v7a\"\r\n            }\r\n        }\r\n        packagingOptions {\r\n            exclude 'com/itextpdf/text/pdf/fonts/cmap_info.txt'\r\n        }\r\n    }\r\n\r\n    signingConfigs {\r\n        release {\r\n            keyAlias 'wuding1234'\r\n            keyPassword 'wuding1234'\r\n            storePassword 'wuding1234'\r\n            storeFile file('D:/SDK/app.jks')\r\n        }\r\n    }\r\n    buildTypes {\r\n        release {\r\n            debuggable true\r\n            minifyEnabled false\r\n            signingConfig signingConfigs.release\r\n        }\r\n        debug {\r\n            debuggable true\r\n            minifyEnabled false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 生成包规则，使用闭包\r\n     */\r\n    applicationVariants.all {\r\n        outputs.each { output ->\r\n            def apkName = \"assistant_v${it.versionName}_${it.buildType.name}_${generateTime()}.apk\"\r\n            if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {\r\n                output.outputFileName = apkName\r\n            }\r\n        }\r\n    }\r\n\r\n    lintOptions {\r\n        abortOnError false\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    packagingOptions {\r\n        pickFirst 'lib/arm64-v8a/libc++_shared.so'\r\n        pickFirst 'lib/armeabi-v7a/libc++_shared.so'\r\n        pickFirst 'lib/x86/libc++_shared.so'\r\n        pickFirst 'lib/x86_64/libc++_shared.so'\r\n        exclude 'META-INF/LGPL2.1'\r\n        exclude 'META-INF/LICENSE'\r\n        exclude 'META-INF/NOTICE'\r\n    }\r\n\r\n    externalNativeBuild {\r\n        cmake {\r\n            path \"src/main/cpp/CMakeLists.txt\"\r\n            version \"3.10.2\"\r\n        }\r\n    }\r\n    //数据库版本随app版本号,有字段修改，请升级versionCode\r\n    greendao {\r\n        schemaVersion rootProject.ext.versionCode\r\n        daoPackage 'com.bytemiracle.greendao'\r\n        targetGenDir 'src/main/java'\r\n    }\r\n}\r\n\r\ndef generateTime() {\r\n    return new Date().format(\"MMdd_HHmm\", TimeZone.getTimeZone(\"GMT+08:00\"))\r\n}\r\n\r\ndependencies {\r\n    api fileTree(dir: 'libs', include: ['*.jar', '*.aar'])\r\n    api project(':smart-base')\r\n    api project(':wildfire-core')\r\n\r\n    //分包\r\n    api deps.androidx.multidex\r\n\r\n    //butterknife 控件注解\r\n    api 'com.jakewharton:butterknife:10.2.3'\r\n    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'\r\n\r\n    //aop编程\r\n    api 'com.github.xuexiangjys.XAOP:xaop-runtime:1.1.0'\r\n\r\n    //数据库\r\n    //api 'org.greenrobot:greendao:3.2.2'\r\n\r\n    api 'com.esri.arcgisruntime:arcgis-android:100.7.0'\r\n    api 'com.cocoahero.android:geojson:1.0.1'\r\n\r\n    // 导出word文件\r\n    api group: 'org.apache.poi', name: 'poi', version: '4.1.2'\r\n    api group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.2'\r\n    api group: 'org.apache.poi', name: 'poi-ooxml-schemas', version: '4.1.2'\r\n    api group: 'javax.xml.stream', name: 'stax-api', version: '1.0'\r\n\r\n    // 导出pdf文件\r\n    api group: 'com.itextpdf', name: 'itextpdf', version: '5.5.13'\r\n    api group: 'com.itextpdf', name: 'itext-asian', version: '5.2.0'\r\n\r\n    api group: 'commons-collections', name: 'commons-collections', version: '3.2.2'\r\n    api group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'\r\n    api 'com.github.bmelnychuk:atv:1.2.+'\r\n    api 'com.github.johnkil.print:print:1.2.2'\r\n\r\n    // 解析xml文件\r\n    api('com.thoughtworks.xstream:xstream:1.4.11.1') {\r\n        exclude group: 'xmlpull', module: 'xmlpull'\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision e197089a8260b5aa5d22d4590d6d913b1475bff0)
+++ app/build.gradle	(date 1615539685110)
@@ -84,6 +84,8 @@
         exclude 'META-INF/LGPL2.1'
         exclude 'META-INF/LICENSE'
         exclude 'META-INF/NOTICE'
+        exclude 'classes.dex'
+        //exclude '**.**'
     }
 
     externalNativeBuild {
Index: smart-base/src/main/java/com/bytemiracle/base/framework/update/bean/UpdateVersionResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- smart-base/src/main/java/com/bytemiracle/base/framework/update/bean/UpdateVersionResponse.java	(date 1615777906642)
+++ smart-base/src/main/java/com/bytemiracle/base/framework/update/bean/UpdateVersionResponse.java	(date 1615777906642)
@@ -0,0 +1,80 @@
+package com.bytemiracle.base.framework.update.bean;
+
+/**
+ * 类功能：TODO:
+ *
+ * @author gwwang
+ * @date 2021/3/15 11:09
+ */
+public class UpdateVersionResponse {
+
+    /**
+     * Data : {"VersionName":null,"VersionCode":0}
+     * Success : true
+     * ErrorCode : 0
+     * Msg : 当前系统版本已是最新
+     */
+
+    private DataDTO Data;
+    private boolean Success;
+    private int ErrorCode;
+    private String Msg;
+
+    public DataDTO getData() {
+        return Data;
+    }
+
+    public void setData(DataDTO Data) {
+        this.Data = Data;
+    }
+
+    public boolean isSuccess() {
+        return Success;
+    }
+
+    public void setSuccess(boolean Success) {
+        this.Success = Success;
+    }
+
+    public int getErrorCode() {
+        return ErrorCode;
+    }
+
+    public void setErrorCode(int ErrorCode) {
+        this.ErrorCode = ErrorCode;
+    }
+
+    public String getMsg() {
+        return Msg;
+    }
+
+    public void setMsg(String Msg) {
+        this.Msg = Msg;
+    }
+
+    public static class DataDTO {
+        /**
+         * VersionName : null
+         * VersionCode : 0.0
+         */
+
+        private String VersionName;
+        private int VersionCode;
+
+        public String getVersionName() {
+            return VersionName;
+        }
+
+        public void setVersionName(String VersionName) {
+            this.VersionName = VersionName;
+        }
+
+        public int getVersionCode() {
+            return VersionCode;
+        }
+
+        public void setVersionCode(int VersionCode) {
+            this.VersionCode = VersionCode;
+        }
+    }
+}
Index: app/src/main/java/com/bytemiracle/project/login/bean/LoginResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/bytemiracle/project/login/bean/LoginResponse.java	(date 1615533751610)
+++ app/src/main/java/com/bytemiracle/project/login/bean/LoginResponse.java	(date 1615533751610)
@@ -0,0 +1,292 @@
+package com.bytemiracle.project.login.bean;
+
+import java.io.Serializable;
+
+/**
+ * 类功能：TODO:
+ *
+ * @author gwwang
+ * @date 2021/3/12 14:55
+ */
+public class LoginResponse {
+
+    /**
+     * data : {"id":151,"createTime":null,"updateTime":null,"username":"王  文","password":null,"nickname":"王文","headImgUrl":null,"mobile":"19988999988","sex":1,"enabled":null,"type":"确权登记局","openId":null,"email":null,"signatureUrl":null,"faceAuth":null,"position":"局长","adminCode":null,"roles":null,"roleId":null,"oldPassword":null,"newPassword":null,"depts":null,"description":"","workNum":"97895"}
+     * code : 0
+     * msg : 设备登录成功
+     */
+
+    private DataDTO data;
+    private int code;
+    private String msg;
+
+    public DataDTO getData() {
+        return data;
+    }
+
+    public void setData(DataDTO data) {
+        this.data = data;
+    }
+
+    public int getCode() {
+        return code;
+    }
+
+    public void setCode(int code) {
+        this.code = code;
+    }
+
+    public String getMsg() {
+        return msg;
+    }
+
+    public void setMsg(String msg) {
+        this.msg = msg;
+    }
+
+    public static class DataDTO implements Serializable {
+        /**
+         * id : 151
+         * createTime : null
+         * updateTime : null
+         * username : 王  文
+         * password : null
+         * nickname : 王文
+         * headImgUrl : null
+         * mobile : 19988999988
+         * sex : 1
+         * enabled : null
+         * type : 确权登记局
+         * openId : null
+         * email : null
+         * signatureUrl : null
+         * faceAuth : null
+         * position : 局长
+         * adminCode : null
+         * roles : null
+         * roleId : null
+         * oldPassword : null
+         * newPassword : null
+         * depts : null
+         * description :
+         * workNum : 97895
+         */
+
+        private int id;
+        private Object createTime;
+        private Object updateTime;
+        private String username;
+        private Object password;
+        private String nickname;
+        private Object headImgUrl;
+        private String mobile;
+        private int sex;
+        private Object enabled;
+        private String type;
+        private Object openId;
+        private Object email;
+        private Object signatureUrl;
+        private Object faceAuth;
+        private String position;
+        private Object adminCode;
+        private Object roles;
+        private Object roleId;
+        private Object oldPassword;
+        private Object newPassword;
+        private Object depts;
+        private String description;
+        private String workNum;
+
+        public int getId() {
+            return id;
+        }
+
+        public void setId(int id) {
+            this.id = id;
+        }
+
+        public Object getCreateTime() {
+            return createTime;
+        }
+
+        public void setCreateTime(Object createTime) {
+            this.createTime = createTime;
+        }
+
+        public Object getUpdateTime() {
+            return updateTime;
+        }
+
+        public void setUpdateTime(Object updateTime) {
+            this.updateTime = updateTime;
+        }
+
+        public String getUsername() {
+            return username;
+        }
+
+        public void setUsername(String username) {
+            this.username = username;
+        }
+
+        public Object getPassword() {
+            return password;
+        }
+
+        public void setPassword(Object password) {
+            this.password = password;
+        }
+
+        public String getNickname() {
+            return nickname;
+        }
+
+        public void setNickname(String nickname) {
+            this.nickname = nickname;
+        }
+
+        public Object getHeadImgUrl() {
+            return headImgUrl;
+        }
+
+        public void setHeadImgUrl(Object headImgUrl) {
+            this.headImgUrl = headImgUrl;
+        }
+
+        public String getMobile() {
+            return mobile;
+        }
+
+        public void setMobile(String mobile) {
+            this.mobile = mobile;
+        }
+
+        public int getSex() {
+            return sex;
+        }
+
+        public void setSex(int sex) {
+            this.sex = sex;
+        }
+
+        public Object getEnabled() {
+            return enabled;
+        }
+
+        public void setEnabled(Object enabled) {
+            this.enabled = enabled;
+        }
+
+        public String getType() {
+            return type;
+        }
+
+        public void setType(String type) {
+            this.type = type;
+        }
+
+        public Object getOpenId() {
+            return openId;
+        }
+
+        public void setOpenId(Object openId) {
+            this.openId = openId;
+        }
+
+        public Object getEmail() {
+            return email;
+        }
+
+        public void setEmail(Object email) {
+            this.email = email;
+        }
+
+        public Object getSignatureUrl() {
+            return signatureUrl;
+        }
+
+        public void setSignatureUrl(Object signatureUrl) {
+            this.signatureUrl = signatureUrl;
+        }
+
+        public Object getFaceAuth() {
+            return faceAuth;
+        }
+
+        public void setFaceAuth(Object faceAuth) {
+            this.faceAuth = faceAuth;
+        }
+
+        public String getPosition() {
+            return position;
+        }
+
+        public void setPosition(String position) {
+            this.position = position;
+        }
+
+        public Object getAdminCode() {
+            return adminCode;
+        }
+
+        public void setAdminCode(Object adminCode) {
+            this.adminCode = adminCode;
+        }
+
+        public Object getRoles() {
+            return roles;
+        }
+
+        public void setRoles(Object roles) {
+            this.roles = roles;
+        }
+
+        public Object getRoleId() {
+            return roleId;
+        }
+
+        public void setRoleId(Object roleId) {
+            this.roleId = roleId;
+        }
+
+        public Object getOldPassword() {
+            return oldPassword;
+        }
+
+        public void setOldPassword(Object oldPassword) {
+            this.oldPassword = oldPassword;
+        }
+
+        public Object getNewPassword() {
+            return newPassword;
+        }
+
+        public void setNewPassword(Object newPassword) {
+            this.newPassword = newPassword;
+        }
+
+        public Object getDepts() {
+            return depts;
+        }
+
+        public void setDepts(Object depts) {
+            this.depts = depts;
+        }
+
+        public String getDescription() {
+            return description;
+        }
+
+        public void setDescription(String description) {
+            this.description = description;
+        }
+
+        public String getWorkNum() {
+            return workNum;
+        }
+
+        public void setWorkNum(String workNum) {
+            this.workNum = workNum;
+        }
+    }
+}
